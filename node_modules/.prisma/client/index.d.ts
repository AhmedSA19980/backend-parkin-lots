
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model booking
 * 
 */
export type booking = {
  id: number
  startTime: Date
  endTime: Date
  isBookedCompeleted: boolean
  userId: number
  parkingLotId: number
  price: number
  totalPrice: number
  capacityUsedDecremented: boolean
}

/**
 * Model parkinglot
 * 
 */
export type parkinglot = {
  id: number
  location: string
  capacity: number
  capacityUsed: number
  hourlyRate: number
  isParkDeleted: boolean
}

/**
 * Model user
 * 
 */
export type user = {
  id: number
  name: string
  email: string
  password: string
  isuserdeleted: boolean
}

/**
 * Model vehicletype
 * 
 */
export type vehicletype = {
  id: number
  type: string
}

/**
 * Model customerpaymentCard
 * 
 */
export type customerpaymentCard = {
  id: number
  cardId: string
  cardBrand: string
  userName: string
  userEmail: string
  cardNumber: string
  cardExpMonth: string
  cardExpYear: string
  cardCVC: string
  country: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bookings
 * const bookings = await prisma.booking.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bookings
   * const bookings = await prisma.booking.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.booking`: Exposes CRUD operations for the **booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.bookingDelegate<GlobalReject>;

  /**
   * `prisma.parkinglot`: Exposes CRUD operations for the **parkinglot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parkinglots
    * const parkinglots = await prisma.parkinglot.findMany()
    * ```
    */
  get parkinglot(): Prisma.parkinglotDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.vehicletype`: Exposes CRUD operations for the **vehicletype** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vehicletypes
    * const vehicletypes = await prisma.vehicletype.findMany()
    * ```
    */
  get vehicletype(): Prisma.vehicletypeDelegate<GlobalReject>;

  /**
   * `prisma.customerpaymentCard`: Exposes CRUD operations for the **customerpaymentCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerpaymentCards
    * const customerpaymentCards = await prisma.customerpaymentCard.findMany()
    * ```
    */
  get customerpaymentCard(): Prisma.customerpaymentCardDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    booking: 'booking',
    parkinglot: 'parkinglot',
    user: 'user',
    vehicletype: 'vehicletype',
    customerpaymentCard: 'customerpaymentCard'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ParkinglotCountOutputType
   */


  export type ParkinglotCountOutputType = {
    booking: number
    vehicletype: number
  }

  export type ParkinglotCountOutputTypeSelect = {
    booking?: boolean
    vehicletype?: boolean
  }

  export type ParkinglotCountOutputTypeGetPayload<S extends boolean | null | undefined | ParkinglotCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ParkinglotCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ParkinglotCountOutputTypeArgs)
    ? ParkinglotCountOutputType 
    : S extends { select: any } & (ParkinglotCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ParkinglotCountOutputType ? ParkinglotCountOutputType[P] : never
  } 
      : ParkinglotCountOutputType




  // Custom InputTypes

  /**
   * ParkinglotCountOutputType without action
   */
  export type ParkinglotCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ParkinglotCountOutputType
     */
    select?: ParkinglotCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    booking: number
    customersCard: number
  }

  export type UserCountOutputTypeSelect = {
    booking?: boolean
    customersCard?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type VehicletypeCountOutputType
   */


  export type VehicletypeCountOutputType = {
    parkinglot: number
  }

  export type VehicletypeCountOutputTypeSelect = {
    parkinglot?: boolean
  }

  export type VehicletypeCountOutputTypeGetPayload<S extends boolean | null | undefined | VehicletypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VehicletypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (VehicletypeCountOutputTypeArgs)
    ? VehicletypeCountOutputType 
    : S extends { select: any } & (VehicletypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof VehicletypeCountOutputType ? VehicletypeCountOutputType[P] : never
  } 
      : VehicletypeCountOutputType




  // Custom InputTypes

  /**
   * VehicletypeCountOutputType without action
   */
  export type VehicletypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VehicletypeCountOutputType
     */
    select?: VehicletypeCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model booking
   */


  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    parkingLotId: number | null
    price: number | null
    totalPrice: number | null
  }

  export type BookingSumAggregateOutputType = {
    id: number | null
    userId: number | null
    parkingLotId: number | null
    price: number | null
    totalPrice: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: number | null
    startTime: Date | null
    endTime: Date | null
    isBookedCompeleted: boolean | null
    userId: number | null
    parkingLotId: number | null
    price: number | null
    totalPrice: number | null
    capacityUsedDecremented: boolean | null
  }

  export type BookingMaxAggregateOutputType = {
    id: number | null
    startTime: Date | null
    endTime: Date | null
    isBookedCompeleted: boolean | null
    userId: number | null
    parkingLotId: number | null
    price: number | null
    totalPrice: number | null
    capacityUsedDecremented: boolean | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    startTime: number
    endTime: number
    isBookedCompeleted: number
    userId: number
    parkingLotId: number
    price: number
    totalPrice: number
    capacityUsedDecremented: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    userId?: true
    parkingLotId?: true
    price?: true
    totalPrice?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    userId?: true
    parkingLotId?: true
    price?: true
    totalPrice?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    isBookedCompeleted?: true
    userId?: true
    parkingLotId?: true
    price?: true
    totalPrice?: true
    capacityUsedDecremented?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    isBookedCompeleted?: true
    userId?: true
    parkingLotId?: true
    price?: true
    totalPrice?: true
    capacityUsedDecremented?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    isBookedCompeleted?: true
    userId?: true
    parkingLotId?: true
    price?: true
    totalPrice?: true
    capacityUsedDecremented?: true
    _all?: true
  }

  export type BookingAggregateArgs = {
    /**
     * Filter which booking to aggregate.
     */
    where?: bookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs = {
    where?: bookingWhereInput
    orderBy?: Enumerable<bookingOrderByWithAggregationInput>
    by: BookingScalarFieldEnum[]
    having?: bookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }


  export type BookingGroupByOutputType = {
    id: number
    startTime: Date
    endTime: Date
    isBookedCompeleted: boolean
    userId: number
    parkingLotId: number
    price: number
    totalPrice: number
    capacityUsedDecremented: boolean
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type bookingSelect = {
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    isBookedCompeleted?: boolean
    userId?: boolean
    parkingLotId?: boolean
    price?: boolean
    totalPrice?: boolean
    capacityUsedDecremented?: boolean
    parkinglot?: boolean | parkinglotArgs
    user?: boolean | userArgs
  }


  export type bookingInclude = {
    parkinglot?: boolean | parkinglotArgs
    user?: boolean | userArgs
  }

  export type bookingGetPayload<S extends boolean | null | undefined | bookingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? booking :
    S extends undefined ? never :
    S extends { include: any } & (bookingArgs | bookingFindManyArgs)
    ? booking  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'parkinglot' ? parkinglotGetPayload<S['include'][P]> :
        P extends 'user' ? userGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (bookingArgs | bookingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'parkinglot' ? parkinglotGetPayload<S['select'][P]> :
        P extends 'user' ? userGetPayload<S['select'][P]> :  P extends keyof booking ? booking[P] : never
  } 
      : booking


  type bookingCountArgs = 
    Omit<bookingFindManyArgs, 'select' | 'include'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface bookingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Booking that matches the filter.
     * @param {bookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bookingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, bookingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'booking'> extends True ? Prisma__bookingClient<bookingGetPayload<T>> : Prisma__bookingClient<bookingGetPayload<T> | null, null>

    /**
     * Find one Booking that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bookingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, bookingFindUniqueOrThrowArgs>
    ): Prisma__bookingClient<bookingGetPayload<T>>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bookingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, bookingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'booking'> extends True ? Prisma__bookingClient<bookingGetPayload<T>> : Prisma__bookingClient<bookingGetPayload<T> | null, null>

    /**
     * Find the first Booking that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bookingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, bookingFindFirstOrThrowArgs>
    ): Prisma__bookingClient<bookingGetPayload<T>>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bookingFindManyArgs>(
      args?: SelectSubset<T, bookingFindManyArgs>
    ): Prisma.PrismaPromise<Array<bookingGetPayload<T>>>

    /**
     * Create a Booking.
     * @param {bookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends bookingCreateArgs>(
      args: SelectSubset<T, bookingCreateArgs>
    ): Prisma__bookingClient<bookingGetPayload<T>>

    /**
     * Create many Bookings.
     *     @param {bookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bookingCreateManyArgs>(
      args?: SelectSubset<T, bookingCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {bookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends bookingDeleteArgs>(
      args: SelectSubset<T, bookingDeleteArgs>
    ): Prisma__bookingClient<bookingGetPayload<T>>

    /**
     * Update one Booking.
     * @param {bookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bookingUpdateArgs>(
      args: SelectSubset<T, bookingUpdateArgs>
    ): Prisma__bookingClient<bookingGetPayload<T>>

    /**
     * Delete zero or more Bookings.
     * @param {bookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bookingDeleteManyArgs>(
      args?: SelectSubset<T, bookingDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bookingUpdateManyArgs>(
      args: SelectSubset<T, bookingUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {bookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends bookingUpsertArgs>(
      args: SelectSubset<T, bookingUpsertArgs>
    ): Prisma__bookingClient<bookingGetPayload<T>>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends bookingCountArgs>(
      args?: Subset<T, bookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bookingClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    parkinglot<T extends parkinglotArgs= {}>(args?: Subset<T, parkinglotArgs>): Prisma__parkinglotClient<parkinglotGetPayload<T> | Null>;

    user<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * booking base type for findUnique actions
   */
  export type bookingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * Filter, which booking to fetch.
     */
    where: bookingWhereUniqueInput
  }

  /**
   * booking findUnique
   */
  export interface bookingFindUniqueArgs extends bookingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * booking findUniqueOrThrow
   */
  export type bookingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * Filter, which booking to fetch.
     */
    where: bookingWhereUniqueInput
  }


  /**
   * booking base type for findFirst actions
   */
  export type bookingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * Filter, which booking to fetch.
     */
    where?: bookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bookings.
     */
    cursor?: bookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bookings.
     */
    distinct?: Enumerable<BookingScalarFieldEnum>
  }

  /**
   * booking findFirst
   */
  export interface bookingFindFirstArgs extends bookingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * booking findFirstOrThrow
   */
  export type bookingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * Filter, which booking to fetch.
     */
    where?: bookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bookings.
     */
    cursor?: bookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bookings.
     */
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * booking findMany
   */
  export type bookingFindManyArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * Filter, which bookings to fetch.
     */
    where?: bookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     */
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bookings.
     */
    cursor?: bookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     */
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * booking create
   */
  export type bookingCreateArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * The data needed to create a booking.
     */
    data: XOR<bookingCreateInput, bookingUncheckedCreateInput>
  }


  /**
   * booking createMany
   */
  export type bookingCreateManyArgs = {
    /**
     * The data used to create many bookings.
     */
    data: Enumerable<bookingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * booking update
   */
  export type bookingUpdateArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * The data needed to update a booking.
     */
    data: XOR<bookingUpdateInput, bookingUncheckedUpdateInput>
    /**
     * Choose, which booking to update.
     */
    where: bookingWhereUniqueInput
  }


  /**
   * booking updateMany
   */
  export type bookingUpdateManyArgs = {
    /**
     * The data used to update bookings.
     */
    data: XOR<bookingUpdateManyMutationInput, bookingUncheckedUpdateManyInput>
    /**
     * Filter which bookings to update
     */
    where?: bookingWhereInput
  }


  /**
   * booking upsert
   */
  export type bookingUpsertArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * The filter to search for the booking to update in case it exists.
     */
    where: bookingWhereUniqueInput
    /**
     * In case the booking found by the `where` argument doesn't exist, create a new booking with this data.
     */
    create: XOR<bookingCreateInput, bookingUncheckedCreateInput>
    /**
     * In case the booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bookingUpdateInput, bookingUncheckedUpdateInput>
  }


  /**
   * booking delete
   */
  export type bookingDeleteArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    /**
     * Filter which booking to delete.
     */
    where: bookingWhereUniqueInput
  }


  /**
   * booking deleteMany
   */
  export type bookingDeleteManyArgs = {
    /**
     * Filter which bookings to delete
     */
    where?: bookingWhereInput
  }


  /**
   * booking without action
   */
  export type bookingArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
  }



  /**
   * Model parkinglot
   */


  export type AggregateParkinglot = {
    _count: ParkinglotCountAggregateOutputType | null
    _avg: ParkinglotAvgAggregateOutputType | null
    _sum: ParkinglotSumAggregateOutputType | null
    _min: ParkinglotMinAggregateOutputType | null
    _max: ParkinglotMaxAggregateOutputType | null
  }

  export type ParkinglotAvgAggregateOutputType = {
    id: number | null
    capacity: number | null
    capacityUsed: number | null
    hourlyRate: number | null
  }

  export type ParkinglotSumAggregateOutputType = {
    id: number | null
    capacity: number | null
    capacityUsed: number | null
    hourlyRate: number | null
  }

  export type ParkinglotMinAggregateOutputType = {
    id: number | null
    location: string | null
    capacity: number | null
    capacityUsed: number | null
    hourlyRate: number | null
    isParkDeleted: boolean | null
  }

  export type ParkinglotMaxAggregateOutputType = {
    id: number | null
    location: string | null
    capacity: number | null
    capacityUsed: number | null
    hourlyRate: number | null
    isParkDeleted: boolean | null
  }

  export type ParkinglotCountAggregateOutputType = {
    id: number
    location: number
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted: number
    _all: number
  }


  export type ParkinglotAvgAggregateInputType = {
    id?: true
    capacity?: true
    capacityUsed?: true
    hourlyRate?: true
  }

  export type ParkinglotSumAggregateInputType = {
    id?: true
    capacity?: true
    capacityUsed?: true
    hourlyRate?: true
  }

  export type ParkinglotMinAggregateInputType = {
    id?: true
    location?: true
    capacity?: true
    capacityUsed?: true
    hourlyRate?: true
    isParkDeleted?: true
  }

  export type ParkinglotMaxAggregateInputType = {
    id?: true
    location?: true
    capacity?: true
    capacityUsed?: true
    hourlyRate?: true
    isParkDeleted?: true
  }

  export type ParkinglotCountAggregateInputType = {
    id?: true
    location?: true
    capacity?: true
    capacityUsed?: true
    hourlyRate?: true
    isParkDeleted?: true
    _all?: true
  }

  export type ParkinglotAggregateArgs = {
    /**
     * Filter which parkinglot to aggregate.
     */
    where?: parkinglotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parkinglots to fetch.
     */
    orderBy?: Enumerable<parkinglotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: parkinglotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parkinglots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parkinglots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned parkinglots
    **/
    _count?: true | ParkinglotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParkinglotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParkinglotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParkinglotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParkinglotMaxAggregateInputType
  }

  export type GetParkinglotAggregateType<T extends ParkinglotAggregateArgs> = {
        [P in keyof T & keyof AggregateParkinglot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParkinglot[P]>
      : GetScalarType<T[P], AggregateParkinglot[P]>
  }




  export type ParkinglotGroupByArgs = {
    where?: parkinglotWhereInput
    orderBy?: Enumerable<parkinglotOrderByWithAggregationInput>
    by: ParkinglotScalarFieldEnum[]
    having?: parkinglotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParkinglotCountAggregateInputType | true
    _avg?: ParkinglotAvgAggregateInputType
    _sum?: ParkinglotSumAggregateInputType
    _min?: ParkinglotMinAggregateInputType
    _max?: ParkinglotMaxAggregateInputType
  }


  export type ParkinglotGroupByOutputType = {
    id: number
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted: boolean
    _count: ParkinglotCountAggregateOutputType | null
    _avg: ParkinglotAvgAggregateOutputType | null
    _sum: ParkinglotSumAggregateOutputType | null
    _min: ParkinglotMinAggregateOutputType | null
    _max: ParkinglotMaxAggregateOutputType | null
  }

  type GetParkinglotGroupByPayload<T extends ParkinglotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ParkinglotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParkinglotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParkinglotGroupByOutputType[P]>
            : GetScalarType<T[P], ParkinglotGroupByOutputType[P]>
        }
      >
    >


  export type parkinglotSelect = {
    id?: boolean
    location?: boolean
    capacity?: boolean
    capacityUsed?: boolean
    hourlyRate?: boolean
    isParkDeleted?: boolean
    booking?: boolean | parkinglot$bookingArgs
    vehicletype?: boolean | parkinglot$vehicletypeArgs
    _count?: boolean | ParkinglotCountOutputTypeArgs
  }


  export type parkinglotInclude = {
    booking?: boolean | parkinglot$bookingArgs
    vehicletype?: boolean | parkinglot$vehicletypeArgs
    _count?: boolean | ParkinglotCountOutputTypeArgs
  }

  export type parkinglotGetPayload<S extends boolean | null | undefined | parkinglotArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? parkinglot :
    S extends undefined ? never :
    S extends { include: any } & (parkinglotArgs | parkinglotFindManyArgs)
    ? parkinglot  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'booking' ? Array < bookingGetPayload<S['include'][P]>>  :
        P extends 'vehicletype' ? Array < vehicletypeGetPayload<S['include'][P]>>  :
        P extends '_count' ? ParkinglotCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (parkinglotArgs | parkinglotFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'booking' ? Array < bookingGetPayload<S['select'][P]>>  :
        P extends 'vehicletype' ? Array < vehicletypeGetPayload<S['select'][P]>>  :
        P extends '_count' ? ParkinglotCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof parkinglot ? parkinglot[P] : never
  } 
      : parkinglot


  type parkinglotCountArgs = 
    Omit<parkinglotFindManyArgs, 'select' | 'include'> & {
      select?: ParkinglotCountAggregateInputType | true
    }

  export interface parkinglotDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Parkinglot that matches the filter.
     * @param {parkinglotFindUniqueArgs} args - Arguments to find a Parkinglot
     * @example
     * // Get one Parkinglot
     * const parkinglot = await prisma.parkinglot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends parkinglotFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, parkinglotFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'parkinglot'> extends True ? Prisma__parkinglotClient<parkinglotGetPayload<T>> : Prisma__parkinglotClient<parkinglotGetPayload<T> | null, null>

    /**
     * Find one Parkinglot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {parkinglotFindUniqueOrThrowArgs} args - Arguments to find a Parkinglot
     * @example
     * // Get one Parkinglot
     * const parkinglot = await prisma.parkinglot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends parkinglotFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, parkinglotFindUniqueOrThrowArgs>
    ): Prisma__parkinglotClient<parkinglotGetPayload<T>>

    /**
     * Find the first Parkinglot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parkinglotFindFirstArgs} args - Arguments to find a Parkinglot
     * @example
     * // Get one Parkinglot
     * const parkinglot = await prisma.parkinglot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends parkinglotFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, parkinglotFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'parkinglot'> extends True ? Prisma__parkinglotClient<parkinglotGetPayload<T>> : Prisma__parkinglotClient<parkinglotGetPayload<T> | null, null>

    /**
     * Find the first Parkinglot that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parkinglotFindFirstOrThrowArgs} args - Arguments to find a Parkinglot
     * @example
     * // Get one Parkinglot
     * const parkinglot = await prisma.parkinglot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends parkinglotFindFirstOrThrowArgs>(
      args?: SelectSubset<T, parkinglotFindFirstOrThrowArgs>
    ): Prisma__parkinglotClient<parkinglotGetPayload<T>>

    /**
     * Find zero or more Parkinglots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parkinglotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parkinglots
     * const parkinglots = await prisma.parkinglot.findMany()
     * 
     * // Get first 10 Parkinglots
     * const parkinglots = await prisma.parkinglot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parkinglotWithIdOnly = await prisma.parkinglot.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends parkinglotFindManyArgs>(
      args?: SelectSubset<T, parkinglotFindManyArgs>
    ): Prisma.PrismaPromise<Array<parkinglotGetPayload<T>>>

    /**
     * Create a Parkinglot.
     * @param {parkinglotCreateArgs} args - Arguments to create a Parkinglot.
     * @example
     * // Create one Parkinglot
     * const Parkinglot = await prisma.parkinglot.create({
     *   data: {
     *     // ... data to create a Parkinglot
     *   }
     * })
     * 
    **/
    create<T extends parkinglotCreateArgs>(
      args: SelectSubset<T, parkinglotCreateArgs>
    ): Prisma__parkinglotClient<parkinglotGetPayload<T>>

    /**
     * Create many Parkinglots.
     *     @param {parkinglotCreateManyArgs} args - Arguments to create many Parkinglots.
     *     @example
     *     // Create many Parkinglots
     *     const parkinglot = await prisma.parkinglot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends parkinglotCreateManyArgs>(
      args?: SelectSubset<T, parkinglotCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Parkinglot.
     * @param {parkinglotDeleteArgs} args - Arguments to delete one Parkinglot.
     * @example
     * // Delete one Parkinglot
     * const Parkinglot = await prisma.parkinglot.delete({
     *   where: {
     *     // ... filter to delete one Parkinglot
     *   }
     * })
     * 
    **/
    delete<T extends parkinglotDeleteArgs>(
      args: SelectSubset<T, parkinglotDeleteArgs>
    ): Prisma__parkinglotClient<parkinglotGetPayload<T>>

    /**
     * Update one Parkinglot.
     * @param {parkinglotUpdateArgs} args - Arguments to update one Parkinglot.
     * @example
     * // Update one Parkinglot
     * const parkinglot = await prisma.parkinglot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends parkinglotUpdateArgs>(
      args: SelectSubset<T, parkinglotUpdateArgs>
    ): Prisma__parkinglotClient<parkinglotGetPayload<T>>

    /**
     * Delete zero or more Parkinglots.
     * @param {parkinglotDeleteManyArgs} args - Arguments to filter Parkinglots to delete.
     * @example
     * // Delete a few Parkinglots
     * const { count } = await prisma.parkinglot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends parkinglotDeleteManyArgs>(
      args?: SelectSubset<T, parkinglotDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parkinglots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parkinglotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parkinglots
     * const parkinglot = await prisma.parkinglot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends parkinglotUpdateManyArgs>(
      args: SelectSubset<T, parkinglotUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parkinglot.
     * @param {parkinglotUpsertArgs} args - Arguments to update or create a Parkinglot.
     * @example
     * // Update or create a Parkinglot
     * const parkinglot = await prisma.parkinglot.upsert({
     *   create: {
     *     // ... data to create a Parkinglot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parkinglot we want to update
     *   }
     * })
    **/
    upsert<T extends parkinglotUpsertArgs>(
      args: SelectSubset<T, parkinglotUpsertArgs>
    ): Prisma__parkinglotClient<parkinglotGetPayload<T>>

    /**
     * Count the number of Parkinglots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {parkinglotCountArgs} args - Arguments to filter Parkinglots to count.
     * @example
     * // Count the number of Parkinglots
     * const count = await prisma.parkinglot.count({
     *   where: {
     *     // ... the filter for the Parkinglots we want to count
     *   }
     * })
    **/
    count<T extends parkinglotCountArgs>(
      args?: Subset<T, parkinglotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParkinglotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parkinglot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkinglotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParkinglotAggregateArgs>(args: Subset<T, ParkinglotAggregateArgs>): Prisma.PrismaPromise<GetParkinglotAggregateType<T>>

    /**
     * Group by Parkinglot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkinglotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParkinglotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParkinglotGroupByArgs['orderBy'] }
        : { orderBy?: ParkinglotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParkinglotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParkinglotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for parkinglot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__parkinglotClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    booking<T extends parkinglot$bookingArgs= {}>(args?: Subset<T, parkinglot$bookingArgs>): Prisma.PrismaPromise<Array<bookingGetPayload<T>>| Null>;

    vehicletype<T extends parkinglot$vehicletypeArgs= {}>(args?: Subset<T, parkinglot$vehicletypeArgs>): Prisma.PrismaPromise<Array<vehicletypeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * parkinglot base type for findUnique actions
   */
  export type parkinglotFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * Filter, which parkinglot to fetch.
     */
    where: parkinglotWhereUniqueInput
  }

  /**
   * parkinglot findUnique
   */
  export interface parkinglotFindUniqueArgs extends parkinglotFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * parkinglot findUniqueOrThrow
   */
  export type parkinglotFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * Filter, which parkinglot to fetch.
     */
    where: parkinglotWhereUniqueInput
  }


  /**
   * parkinglot base type for findFirst actions
   */
  export type parkinglotFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * Filter, which parkinglot to fetch.
     */
    where?: parkinglotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parkinglots to fetch.
     */
    orderBy?: Enumerable<parkinglotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for parkinglots.
     */
    cursor?: parkinglotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parkinglots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parkinglots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of parkinglots.
     */
    distinct?: Enumerable<ParkinglotScalarFieldEnum>
  }

  /**
   * parkinglot findFirst
   */
  export interface parkinglotFindFirstArgs extends parkinglotFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * parkinglot findFirstOrThrow
   */
  export type parkinglotFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * Filter, which parkinglot to fetch.
     */
    where?: parkinglotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parkinglots to fetch.
     */
    orderBy?: Enumerable<parkinglotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for parkinglots.
     */
    cursor?: parkinglotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parkinglots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parkinglots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of parkinglots.
     */
    distinct?: Enumerable<ParkinglotScalarFieldEnum>
  }


  /**
   * parkinglot findMany
   */
  export type parkinglotFindManyArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * Filter, which parkinglots to fetch.
     */
    where?: parkinglotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of parkinglots to fetch.
     */
    orderBy?: Enumerable<parkinglotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing parkinglots.
     */
    cursor?: parkinglotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` parkinglots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` parkinglots.
     */
    skip?: number
    distinct?: Enumerable<ParkinglotScalarFieldEnum>
  }


  /**
   * parkinglot create
   */
  export type parkinglotCreateArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * The data needed to create a parkinglot.
     */
    data: XOR<parkinglotCreateInput, parkinglotUncheckedCreateInput>
  }


  /**
   * parkinglot createMany
   */
  export type parkinglotCreateManyArgs = {
    /**
     * The data used to create many parkinglots.
     */
    data: Enumerable<parkinglotCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * parkinglot update
   */
  export type parkinglotUpdateArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * The data needed to update a parkinglot.
     */
    data: XOR<parkinglotUpdateInput, parkinglotUncheckedUpdateInput>
    /**
     * Choose, which parkinglot to update.
     */
    where: parkinglotWhereUniqueInput
  }


  /**
   * parkinglot updateMany
   */
  export type parkinglotUpdateManyArgs = {
    /**
     * The data used to update parkinglots.
     */
    data: XOR<parkinglotUpdateManyMutationInput, parkinglotUncheckedUpdateManyInput>
    /**
     * Filter which parkinglots to update
     */
    where?: parkinglotWhereInput
  }


  /**
   * parkinglot upsert
   */
  export type parkinglotUpsertArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * The filter to search for the parkinglot to update in case it exists.
     */
    where: parkinglotWhereUniqueInput
    /**
     * In case the parkinglot found by the `where` argument doesn't exist, create a new parkinglot with this data.
     */
    create: XOR<parkinglotCreateInput, parkinglotUncheckedCreateInput>
    /**
     * In case the parkinglot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<parkinglotUpdateInput, parkinglotUncheckedUpdateInput>
  }


  /**
   * parkinglot delete
   */
  export type parkinglotDeleteArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    /**
     * Filter which parkinglot to delete.
     */
    where: parkinglotWhereUniqueInput
  }


  /**
   * parkinglot deleteMany
   */
  export type parkinglotDeleteManyArgs = {
    /**
     * Filter which parkinglots to delete
     */
    where?: parkinglotWhereInput
  }


  /**
   * parkinglot.booking
   */
  export type parkinglot$bookingArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    where?: bookingWhereInput
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    cursor?: bookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * parkinglot.vehicletype
   */
  export type parkinglot$vehicletypeArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    where?: vehicletypeWhereInput
    orderBy?: Enumerable<vehicletypeOrderByWithRelationInput>
    cursor?: vehicletypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VehicletypeScalarFieldEnum>
  }


  /**
   * parkinglot without action
   */
  export type parkinglotArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    isuserdeleted: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    isuserdeleted: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    isuserdeleted: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    isuserdeleted?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    isuserdeleted?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    isuserdeleted?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    isuserdeleted: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    isuserdeleted?: boolean
    booking?: boolean | user$bookingArgs
    customersCard?: boolean | user$customersCardArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type userInclude = {
    booking?: boolean | user$bookingArgs
    customersCard?: boolean | user$customersCardArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<S extends boolean | null | undefined | userArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? user :
    S extends undefined ? never :
    S extends { include: any } & (userArgs | userFindManyArgs)
    ? user  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'booking' ? Array < bookingGetPayload<S['include'][P]>>  :
        P extends 'customersCard' ? Array < customerpaymentCardGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (userArgs | userFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'booking' ? Array < bookingGetPayload<S['select'][P]>>  :
        P extends 'customersCard' ? Array < customerpaymentCardGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
      : user


  type userCountArgs = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): Prisma.PrismaPromise<Array<userGetPayload<T>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    booking<T extends user$bookingArgs= {}>(args?: Subset<T, user$bookingArgs>): Prisma.PrismaPromise<Array<bookingGetPayload<T>>| Null>;

    customersCard<T extends user$customersCardArgs= {}>(args?: Subset<T, user$customersCardArgs>): Prisma.PrismaPromise<Array<customerpaymentCardGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.booking
   */
  export type user$bookingArgs = {
    /**
     * Select specific fields to fetch from the booking
     */
    select?: bookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bookingInclude | null
    where?: bookingWhereInput
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    cursor?: bookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * user.customersCard
   */
  export type user$customersCardArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    where?: customerpaymentCardWhereInput
    orderBy?: Enumerable<customerpaymentCardOrderByWithRelationInput>
    cursor?: customerpaymentCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CustomerpaymentCardScalarFieldEnum>
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
  }



  /**
   * Model vehicletype
   */


  export type AggregateVehicletype = {
    _count: VehicletypeCountAggregateOutputType | null
    _avg: VehicletypeAvgAggregateOutputType | null
    _sum: VehicletypeSumAggregateOutputType | null
    _min: VehicletypeMinAggregateOutputType | null
    _max: VehicletypeMaxAggregateOutputType | null
  }

  export type VehicletypeAvgAggregateOutputType = {
    id: number | null
  }

  export type VehicletypeSumAggregateOutputType = {
    id: number | null
  }

  export type VehicletypeMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type VehicletypeMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type VehicletypeCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type VehicletypeAvgAggregateInputType = {
    id?: true
  }

  export type VehicletypeSumAggregateInputType = {
    id?: true
  }

  export type VehicletypeMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type VehicletypeMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type VehicletypeCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type VehicletypeAggregateArgs = {
    /**
     * Filter which vehicletype to aggregate.
     */
    where?: vehicletypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vehicletypes to fetch.
     */
    orderBy?: Enumerable<vehicletypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: vehicletypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vehicletypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vehicletypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned vehicletypes
    **/
    _count?: true | VehicletypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehicletypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehicletypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehicletypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehicletypeMaxAggregateInputType
  }

  export type GetVehicletypeAggregateType<T extends VehicletypeAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicletype]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicletype[P]>
      : GetScalarType<T[P], AggregateVehicletype[P]>
  }




  export type VehicletypeGroupByArgs = {
    where?: vehicletypeWhereInput
    orderBy?: Enumerable<vehicletypeOrderByWithAggregationInput>
    by: VehicletypeScalarFieldEnum[]
    having?: vehicletypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehicletypeCountAggregateInputType | true
    _avg?: VehicletypeAvgAggregateInputType
    _sum?: VehicletypeSumAggregateInputType
    _min?: VehicletypeMinAggregateInputType
    _max?: VehicletypeMaxAggregateInputType
  }


  export type VehicletypeGroupByOutputType = {
    id: number
    type: string
    _count: VehicletypeCountAggregateOutputType | null
    _avg: VehicletypeAvgAggregateOutputType | null
    _sum: VehicletypeSumAggregateOutputType | null
    _min: VehicletypeMinAggregateOutputType | null
    _max: VehicletypeMaxAggregateOutputType | null
  }

  type GetVehicletypeGroupByPayload<T extends VehicletypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VehicletypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehicletypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehicletypeGroupByOutputType[P]>
            : GetScalarType<T[P], VehicletypeGroupByOutputType[P]>
        }
      >
    >


  export type vehicletypeSelect = {
    id?: boolean
    type?: boolean
    parkinglot?: boolean | vehicletype$parkinglotArgs
    _count?: boolean | VehicletypeCountOutputTypeArgs
  }


  export type vehicletypeInclude = {
    parkinglot?: boolean | vehicletype$parkinglotArgs
    _count?: boolean | VehicletypeCountOutputTypeArgs
  }

  export type vehicletypeGetPayload<S extends boolean | null | undefined | vehicletypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? vehicletype :
    S extends undefined ? never :
    S extends { include: any } & (vehicletypeArgs | vehicletypeFindManyArgs)
    ? vehicletype  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'parkinglot' ? Array < parkinglotGetPayload<S['include'][P]>>  :
        P extends '_count' ? VehicletypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (vehicletypeArgs | vehicletypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'parkinglot' ? Array < parkinglotGetPayload<S['select'][P]>>  :
        P extends '_count' ? VehicletypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof vehicletype ? vehicletype[P] : never
  } 
      : vehicletype


  type vehicletypeCountArgs = 
    Omit<vehicletypeFindManyArgs, 'select' | 'include'> & {
      select?: VehicletypeCountAggregateInputType | true
    }

  export interface vehicletypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Vehicletype that matches the filter.
     * @param {vehicletypeFindUniqueArgs} args - Arguments to find a Vehicletype
     * @example
     * // Get one Vehicletype
     * const vehicletype = await prisma.vehicletype.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends vehicletypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, vehicletypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'vehicletype'> extends True ? Prisma__vehicletypeClient<vehicletypeGetPayload<T>> : Prisma__vehicletypeClient<vehicletypeGetPayload<T> | null, null>

    /**
     * Find one Vehicletype that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {vehicletypeFindUniqueOrThrowArgs} args - Arguments to find a Vehicletype
     * @example
     * // Get one Vehicletype
     * const vehicletype = await prisma.vehicletype.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends vehicletypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, vehicletypeFindUniqueOrThrowArgs>
    ): Prisma__vehicletypeClient<vehicletypeGetPayload<T>>

    /**
     * Find the first Vehicletype that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vehicletypeFindFirstArgs} args - Arguments to find a Vehicletype
     * @example
     * // Get one Vehicletype
     * const vehicletype = await prisma.vehicletype.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends vehicletypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, vehicletypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'vehicletype'> extends True ? Prisma__vehicletypeClient<vehicletypeGetPayload<T>> : Prisma__vehicletypeClient<vehicletypeGetPayload<T> | null, null>

    /**
     * Find the first Vehicletype that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vehicletypeFindFirstOrThrowArgs} args - Arguments to find a Vehicletype
     * @example
     * // Get one Vehicletype
     * const vehicletype = await prisma.vehicletype.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends vehicletypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, vehicletypeFindFirstOrThrowArgs>
    ): Prisma__vehicletypeClient<vehicletypeGetPayload<T>>

    /**
     * Find zero or more Vehicletypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vehicletypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vehicletypes
     * const vehicletypes = await prisma.vehicletype.findMany()
     * 
     * // Get first 10 Vehicletypes
     * const vehicletypes = await prisma.vehicletype.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehicletypeWithIdOnly = await prisma.vehicletype.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends vehicletypeFindManyArgs>(
      args?: SelectSubset<T, vehicletypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<vehicletypeGetPayload<T>>>

    /**
     * Create a Vehicletype.
     * @param {vehicletypeCreateArgs} args - Arguments to create a Vehicletype.
     * @example
     * // Create one Vehicletype
     * const Vehicletype = await prisma.vehicletype.create({
     *   data: {
     *     // ... data to create a Vehicletype
     *   }
     * })
     * 
    **/
    create<T extends vehicletypeCreateArgs>(
      args: SelectSubset<T, vehicletypeCreateArgs>
    ): Prisma__vehicletypeClient<vehicletypeGetPayload<T>>

    /**
     * Create many Vehicletypes.
     *     @param {vehicletypeCreateManyArgs} args - Arguments to create many Vehicletypes.
     *     @example
     *     // Create many Vehicletypes
     *     const vehicletype = await prisma.vehicletype.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends vehicletypeCreateManyArgs>(
      args?: SelectSubset<T, vehicletypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vehicletype.
     * @param {vehicletypeDeleteArgs} args - Arguments to delete one Vehicletype.
     * @example
     * // Delete one Vehicletype
     * const Vehicletype = await prisma.vehicletype.delete({
     *   where: {
     *     // ... filter to delete one Vehicletype
     *   }
     * })
     * 
    **/
    delete<T extends vehicletypeDeleteArgs>(
      args: SelectSubset<T, vehicletypeDeleteArgs>
    ): Prisma__vehicletypeClient<vehicletypeGetPayload<T>>

    /**
     * Update one Vehicletype.
     * @param {vehicletypeUpdateArgs} args - Arguments to update one Vehicletype.
     * @example
     * // Update one Vehicletype
     * const vehicletype = await prisma.vehicletype.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends vehicletypeUpdateArgs>(
      args: SelectSubset<T, vehicletypeUpdateArgs>
    ): Prisma__vehicletypeClient<vehicletypeGetPayload<T>>

    /**
     * Delete zero or more Vehicletypes.
     * @param {vehicletypeDeleteManyArgs} args - Arguments to filter Vehicletypes to delete.
     * @example
     * // Delete a few Vehicletypes
     * const { count } = await prisma.vehicletype.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends vehicletypeDeleteManyArgs>(
      args?: SelectSubset<T, vehicletypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicletypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vehicletypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vehicletypes
     * const vehicletype = await prisma.vehicletype.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends vehicletypeUpdateManyArgs>(
      args: SelectSubset<T, vehicletypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vehicletype.
     * @param {vehicletypeUpsertArgs} args - Arguments to update or create a Vehicletype.
     * @example
     * // Update or create a Vehicletype
     * const vehicletype = await prisma.vehicletype.upsert({
     *   create: {
     *     // ... data to create a Vehicletype
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vehicletype we want to update
     *   }
     * })
    **/
    upsert<T extends vehicletypeUpsertArgs>(
      args: SelectSubset<T, vehicletypeUpsertArgs>
    ): Prisma__vehicletypeClient<vehicletypeGetPayload<T>>

    /**
     * Count the number of Vehicletypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vehicletypeCountArgs} args - Arguments to filter Vehicletypes to count.
     * @example
     * // Count the number of Vehicletypes
     * const count = await prisma.vehicletype.count({
     *   where: {
     *     // ... the filter for the Vehicletypes we want to count
     *   }
     * })
    **/
    count<T extends vehicletypeCountArgs>(
      args?: Subset<T, vehicletypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehicletypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vehicletype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicletypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehicletypeAggregateArgs>(args: Subset<T, VehicletypeAggregateArgs>): Prisma.PrismaPromise<GetVehicletypeAggregateType<T>>

    /**
     * Group by Vehicletype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicletypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehicletypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehicletypeGroupByArgs['orderBy'] }
        : { orderBy?: VehicletypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehicletypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehicletypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for vehicletype.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__vehicletypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    parkinglot<T extends vehicletype$parkinglotArgs= {}>(args?: Subset<T, vehicletype$parkinglotArgs>): Prisma.PrismaPromise<Array<parkinglotGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * vehicletype base type for findUnique actions
   */
  export type vehicletypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * Filter, which vehicletype to fetch.
     */
    where: vehicletypeWhereUniqueInput
  }

  /**
   * vehicletype findUnique
   */
  export interface vehicletypeFindUniqueArgs extends vehicletypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * vehicletype findUniqueOrThrow
   */
  export type vehicletypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * Filter, which vehicletype to fetch.
     */
    where: vehicletypeWhereUniqueInput
  }


  /**
   * vehicletype base type for findFirst actions
   */
  export type vehicletypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * Filter, which vehicletype to fetch.
     */
    where?: vehicletypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vehicletypes to fetch.
     */
    orderBy?: Enumerable<vehicletypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vehicletypes.
     */
    cursor?: vehicletypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vehicletypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vehicletypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vehicletypes.
     */
    distinct?: Enumerable<VehicletypeScalarFieldEnum>
  }

  /**
   * vehicletype findFirst
   */
  export interface vehicletypeFindFirstArgs extends vehicletypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * vehicletype findFirstOrThrow
   */
  export type vehicletypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * Filter, which vehicletype to fetch.
     */
    where?: vehicletypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vehicletypes to fetch.
     */
    orderBy?: Enumerable<vehicletypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vehicletypes.
     */
    cursor?: vehicletypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vehicletypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vehicletypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vehicletypes.
     */
    distinct?: Enumerable<VehicletypeScalarFieldEnum>
  }


  /**
   * vehicletype findMany
   */
  export type vehicletypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * Filter, which vehicletypes to fetch.
     */
    where?: vehicletypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vehicletypes to fetch.
     */
    orderBy?: Enumerable<vehicletypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing vehicletypes.
     */
    cursor?: vehicletypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vehicletypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vehicletypes.
     */
    skip?: number
    distinct?: Enumerable<VehicletypeScalarFieldEnum>
  }


  /**
   * vehicletype create
   */
  export type vehicletypeCreateArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * The data needed to create a vehicletype.
     */
    data: XOR<vehicletypeCreateInput, vehicletypeUncheckedCreateInput>
  }


  /**
   * vehicletype createMany
   */
  export type vehicletypeCreateManyArgs = {
    /**
     * The data used to create many vehicletypes.
     */
    data: Enumerable<vehicletypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * vehicletype update
   */
  export type vehicletypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * The data needed to update a vehicletype.
     */
    data: XOR<vehicletypeUpdateInput, vehicletypeUncheckedUpdateInput>
    /**
     * Choose, which vehicletype to update.
     */
    where: vehicletypeWhereUniqueInput
  }


  /**
   * vehicletype updateMany
   */
  export type vehicletypeUpdateManyArgs = {
    /**
     * The data used to update vehicletypes.
     */
    data: XOR<vehicletypeUpdateManyMutationInput, vehicletypeUncheckedUpdateManyInput>
    /**
     * Filter which vehicletypes to update
     */
    where?: vehicletypeWhereInput
  }


  /**
   * vehicletype upsert
   */
  export type vehicletypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * The filter to search for the vehicletype to update in case it exists.
     */
    where: vehicletypeWhereUniqueInput
    /**
     * In case the vehicletype found by the `where` argument doesn't exist, create a new vehicletype with this data.
     */
    create: XOR<vehicletypeCreateInput, vehicletypeUncheckedCreateInput>
    /**
     * In case the vehicletype was found with the provided `where` argument, update it with this data.
     */
    update: XOR<vehicletypeUpdateInput, vehicletypeUncheckedUpdateInput>
  }


  /**
   * vehicletype delete
   */
  export type vehicletypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
    /**
     * Filter which vehicletype to delete.
     */
    where: vehicletypeWhereUniqueInput
  }


  /**
   * vehicletype deleteMany
   */
  export type vehicletypeDeleteManyArgs = {
    /**
     * Filter which vehicletypes to delete
     */
    where?: vehicletypeWhereInput
  }


  /**
   * vehicletype.parkinglot
   */
  export type vehicletype$parkinglotArgs = {
    /**
     * Select specific fields to fetch from the parkinglot
     */
    select?: parkinglotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: parkinglotInclude | null
    where?: parkinglotWhereInput
    orderBy?: Enumerable<parkinglotOrderByWithRelationInput>
    cursor?: parkinglotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ParkinglotScalarFieldEnum>
  }


  /**
   * vehicletype without action
   */
  export type vehicletypeArgs = {
    /**
     * Select specific fields to fetch from the vehicletype
     */
    select?: vehicletypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: vehicletypeInclude | null
  }



  /**
   * Model customerpaymentCard
   */


  export type AggregateCustomerpaymentCard = {
    _count: CustomerpaymentCardCountAggregateOutputType | null
    _avg: CustomerpaymentCardAvgAggregateOutputType | null
    _sum: CustomerpaymentCardSumAggregateOutputType | null
    _min: CustomerpaymentCardMinAggregateOutputType | null
    _max: CustomerpaymentCardMaxAggregateOutputType | null
  }

  export type CustomerpaymentCardAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerpaymentCardSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerpaymentCardMinAggregateOutputType = {
    id: number | null
    cardId: string | null
    cardBrand: string | null
    userName: string | null
    userEmail: string | null
    cardNumber: string | null
    cardExpMonth: string | null
    cardExpYear: string | null
    cardCVC: string | null
    country: string | null
  }

  export type CustomerpaymentCardMaxAggregateOutputType = {
    id: number | null
    cardId: string | null
    cardBrand: string | null
    userName: string | null
    userEmail: string | null
    cardNumber: string | null
    cardExpMonth: string | null
    cardExpYear: string | null
    cardCVC: string | null
    country: string | null
  }

  export type CustomerpaymentCardCountAggregateOutputType = {
    id: number
    cardId: number
    cardBrand: number
    userName: number
    userEmail: number
    cardNumber: number
    cardExpMonth: number
    cardExpYear: number
    cardCVC: number
    country: number
    _all: number
  }


  export type CustomerpaymentCardAvgAggregateInputType = {
    id?: true
  }

  export type CustomerpaymentCardSumAggregateInputType = {
    id?: true
  }

  export type CustomerpaymentCardMinAggregateInputType = {
    id?: true
    cardId?: true
    cardBrand?: true
    userName?: true
    userEmail?: true
    cardNumber?: true
    cardExpMonth?: true
    cardExpYear?: true
    cardCVC?: true
    country?: true
  }

  export type CustomerpaymentCardMaxAggregateInputType = {
    id?: true
    cardId?: true
    cardBrand?: true
    userName?: true
    userEmail?: true
    cardNumber?: true
    cardExpMonth?: true
    cardExpYear?: true
    cardCVC?: true
    country?: true
  }

  export type CustomerpaymentCardCountAggregateInputType = {
    id?: true
    cardId?: true
    cardBrand?: true
    userName?: true
    userEmail?: true
    cardNumber?: true
    cardExpMonth?: true
    cardExpYear?: true
    cardCVC?: true
    country?: true
    _all?: true
  }

  export type CustomerpaymentCardAggregateArgs = {
    /**
     * Filter which customerpaymentCard to aggregate.
     */
    where?: customerpaymentCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerpaymentCards to fetch.
     */
    orderBy?: Enumerable<customerpaymentCardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customerpaymentCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerpaymentCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerpaymentCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customerpaymentCards
    **/
    _count?: true | CustomerpaymentCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerpaymentCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerpaymentCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerpaymentCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerpaymentCardMaxAggregateInputType
  }

  export type GetCustomerpaymentCardAggregateType<T extends CustomerpaymentCardAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerpaymentCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerpaymentCard[P]>
      : GetScalarType<T[P], AggregateCustomerpaymentCard[P]>
  }




  export type CustomerpaymentCardGroupByArgs = {
    where?: customerpaymentCardWhereInput
    orderBy?: Enumerable<customerpaymentCardOrderByWithAggregationInput>
    by: CustomerpaymentCardScalarFieldEnum[]
    having?: customerpaymentCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerpaymentCardCountAggregateInputType | true
    _avg?: CustomerpaymentCardAvgAggregateInputType
    _sum?: CustomerpaymentCardSumAggregateInputType
    _min?: CustomerpaymentCardMinAggregateInputType
    _max?: CustomerpaymentCardMaxAggregateInputType
  }


  export type CustomerpaymentCardGroupByOutputType = {
    id: number
    cardId: string
    cardBrand: string
    userName: string
    userEmail: string
    cardNumber: string
    cardExpMonth: string
    cardExpYear: string
    cardCVC: string
    country: string
    _count: CustomerpaymentCardCountAggregateOutputType | null
    _avg: CustomerpaymentCardAvgAggregateOutputType | null
    _sum: CustomerpaymentCardSumAggregateOutputType | null
    _min: CustomerpaymentCardMinAggregateOutputType | null
    _max: CustomerpaymentCardMaxAggregateOutputType | null
  }

  type GetCustomerpaymentCardGroupByPayload<T extends CustomerpaymentCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomerpaymentCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerpaymentCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerpaymentCardGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerpaymentCardGroupByOutputType[P]>
        }
      >
    >


  export type customerpaymentCardSelect = {
    id?: boolean
    cardId?: boolean
    cardBrand?: boolean
    userName?: boolean
    userEmail?: boolean
    cardNumber?: boolean
    cardExpMonth?: boolean
    cardExpYear?: boolean
    cardCVC?: boolean
    country?: boolean
    userCard?: boolean | userArgs
  }


  export type customerpaymentCardInclude = {
    userCard?: boolean | userArgs
  }

  export type customerpaymentCardGetPayload<S extends boolean | null | undefined | customerpaymentCardArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? customerpaymentCard :
    S extends undefined ? never :
    S extends { include: any } & (customerpaymentCardArgs | customerpaymentCardFindManyArgs)
    ? customerpaymentCard  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'userCard' ? userGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (customerpaymentCardArgs | customerpaymentCardFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'userCard' ? userGetPayload<S['select'][P]> :  P extends keyof customerpaymentCard ? customerpaymentCard[P] : never
  } 
      : customerpaymentCard


  type customerpaymentCardCountArgs = 
    Omit<customerpaymentCardFindManyArgs, 'select' | 'include'> & {
      select?: CustomerpaymentCardCountAggregateInputType | true
    }

  export interface customerpaymentCardDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CustomerpaymentCard that matches the filter.
     * @param {customerpaymentCardFindUniqueArgs} args - Arguments to find a CustomerpaymentCard
     * @example
     * // Get one CustomerpaymentCard
     * const customerpaymentCard = await prisma.customerpaymentCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customerpaymentCardFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customerpaymentCardFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customerpaymentCard'> extends True ? Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>> : Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T> | null, null>

    /**
     * Find one CustomerpaymentCard that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {customerpaymentCardFindUniqueOrThrowArgs} args - Arguments to find a CustomerpaymentCard
     * @example
     * // Get one CustomerpaymentCard
     * const customerpaymentCard = await prisma.customerpaymentCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends customerpaymentCardFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, customerpaymentCardFindUniqueOrThrowArgs>
    ): Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>>

    /**
     * Find the first CustomerpaymentCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerpaymentCardFindFirstArgs} args - Arguments to find a CustomerpaymentCard
     * @example
     * // Get one CustomerpaymentCard
     * const customerpaymentCard = await prisma.customerpaymentCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customerpaymentCardFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customerpaymentCardFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customerpaymentCard'> extends True ? Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>> : Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T> | null, null>

    /**
     * Find the first CustomerpaymentCard that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerpaymentCardFindFirstOrThrowArgs} args - Arguments to find a CustomerpaymentCard
     * @example
     * // Get one CustomerpaymentCard
     * const customerpaymentCard = await prisma.customerpaymentCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends customerpaymentCardFindFirstOrThrowArgs>(
      args?: SelectSubset<T, customerpaymentCardFindFirstOrThrowArgs>
    ): Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>>

    /**
     * Find zero or more CustomerpaymentCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerpaymentCardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerpaymentCards
     * const customerpaymentCards = await prisma.customerpaymentCard.findMany()
     * 
     * // Get first 10 CustomerpaymentCards
     * const customerpaymentCards = await prisma.customerpaymentCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerpaymentCardWithIdOnly = await prisma.customerpaymentCard.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends customerpaymentCardFindManyArgs>(
      args?: SelectSubset<T, customerpaymentCardFindManyArgs>
    ): Prisma.PrismaPromise<Array<customerpaymentCardGetPayload<T>>>

    /**
     * Create a CustomerpaymentCard.
     * @param {customerpaymentCardCreateArgs} args - Arguments to create a CustomerpaymentCard.
     * @example
     * // Create one CustomerpaymentCard
     * const CustomerpaymentCard = await prisma.customerpaymentCard.create({
     *   data: {
     *     // ... data to create a CustomerpaymentCard
     *   }
     * })
     * 
    **/
    create<T extends customerpaymentCardCreateArgs>(
      args: SelectSubset<T, customerpaymentCardCreateArgs>
    ): Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>>

    /**
     * Create many CustomerpaymentCards.
     *     @param {customerpaymentCardCreateManyArgs} args - Arguments to create many CustomerpaymentCards.
     *     @example
     *     // Create many CustomerpaymentCards
     *     const customerpaymentCard = await prisma.customerpaymentCard.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customerpaymentCardCreateManyArgs>(
      args?: SelectSubset<T, customerpaymentCardCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CustomerpaymentCard.
     * @param {customerpaymentCardDeleteArgs} args - Arguments to delete one CustomerpaymentCard.
     * @example
     * // Delete one CustomerpaymentCard
     * const CustomerpaymentCard = await prisma.customerpaymentCard.delete({
     *   where: {
     *     // ... filter to delete one CustomerpaymentCard
     *   }
     * })
     * 
    **/
    delete<T extends customerpaymentCardDeleteArgs>(
      args: SelectSubset<T, customerpaymentCardDeleteArgs>
    ): Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>>

    /**
     * Update one CustomerpaymentCard.
     * @param {customerpaymentCardUpdateArgs} args - Arguments to update one CustomerpaymentCard.
     * @example
     * // Update one CustomerpaymentCard
     * const customerpaymentCard = await prisma.customerpaymentCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customerpaymentCardUpdateArgs>(
      args: SelectSubset<T, customerpaymentCardUpdateArgs>
    ): Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>>

    /**
     * Delete zero or more CustomerpaymentCards.
     * @param {customerpaymentCardDeleteManyArgs} args - Arguments to filter CustomerpaymentCards to delete.
     * @example
     * // Delete a few CustomerpaymentCards
     * const { count } = await prisma.customerpaymentCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customerpaymentCardDeleteManyArgs>(
      args?: SelectSubset<T, customerpaymentCardDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerpaymentCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerpaymentCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerpaymentCards
     * const customerpaymentCard = await prisma.customerpaymentCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customerpaymentCardUpdateManyArgs>(
      args: SelectSubset<T, customerpaymentCardUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerpaymentCard.
     * @param {customerpaymentCardUpsertArgs} args - Arguments to update or create a CustomerpaymentCard.
     * @example
     * // Update or create a CustomerpaymentCard
     * const customerpaymentCard = await prisma.customerpaymentCard.upsert({
     *   create: {
     *     // ... data to create a CustomerpaymentCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerpaymentCard we want to update
     *   }
     * })
    **/
    upsert<T extends customerpaymentCardUpsertArgs>(
      args: SelectSubset<T, customerpaymentCardUpsertArgs>
    ): Prisma__customerpaymentCardClient<customerpaymentCardGetPayload<T>>

    /**
     * Count the number of CustomerpaymentCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerpaymentCardCountArgs} args - Arguments to filter CustomerpaymentCards to count.
     * @example
     * // Count the number of CustomerpaymentCards
     * const count = await prisma.customerpaymentCard.count({
     *   where: {
     *     // ... the filter for the CustomerpaymentCards we want to count
     *   }
     * })
    **/
    count<T extends customerpaymentCardCountArgs>(
      args?: Subset<T, customerpaymentCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerpaymentCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerpaymentCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerpaymentCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerpaymentCardAggregateArgs>(args: Subset<T, CustomerpaymentCardAggregateArgs>): Prisma.PrismaPromise<GetCustomerpaymentCardAggregateType<T>>

    /**
     * Group by CustomerpaymentCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerpaymentCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerpaymentCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerpaymentCardGroupByArgs['orderBy'] }
        : { orderBy?: CustomerpaymentCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerpaymentCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerpaymentCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for customerpaymentCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customerpaymentCardClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    userCard<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * customerpaymentCard base type for findUnique actions
   */
  export type customerpaymentCardFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * Filter, which customerpaymentCard to fetch.
     */
    where: customerpaymentCardWhereUniqueInput
  }

  /**
   * customerpaymentCard findUnique
   */
  export interface customerpaymentCardFindUniqueArgs extends customerpaymentCardFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customerpaymentCard findUniqueOrThrow
   */
  export type customerpaymentCardFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * Filter, which customerpaymentCard to fetch.
     */
    where: customerpaymentCardWhereUniqueInput
  }


  /**
   * customerpaymentCard base type for findFirst actions
   */
  export type customerpaymentCardFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * Filter, which customerpaymentCard to fetch.
     */
    where?: customerpaymentCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerpaymentCards to fetch.
     */
    orderBy?: Enumerable<customerpaymentCardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customerpaymentCards.
     */
    cursor?: customerpaymentCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerpaymentCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerpaymentCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customerpaymentCards.
     */
    distinct?: Enumerable<CustomerpaymentCardScalarFieldEnum>
  }

  /**
   * customerpaymentCard findFirst
   */
  export interface customerpaymentCardFindFirstArgs extends customerpaymentCardFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customerpaymentCard findFirstOrThrow
   */
  export type customerpaymentCardFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * Filter, which customerpaymentCard to fetch.
     */
    where?: customerpaymentCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerpaymentCards to fetch.
     */
    orderBy?: Enumerable<customerpaymentCardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customerpaymentCards.
     */
    cursor?: customerpaymentCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerpaymentCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerpaymentCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customerpaymentCards.
     */
    distinct?: Enumerable<CustomerpaymentCardScalarFieldEnum>
  }


  /**
   * customerpaymentCard findMany
   */
  export type customerpaymentCardFindManyArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * Filter, which customerpaymentCards to fetch.
     */
    where?: customerpaymentCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerpaymentCards to fetch.
     */
    orderBy?: Enumerable<customerpaymentCardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customerpaymentCards.
     */
    cursor?: customerpaymentCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerpaymentCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerpaymentCards.
     */
    skip?: number
    distinct?: Enumerable<CustomerpaymentCardScalarFieldEnum>
  }


  /**
   * customerpaymentCard create
   */
  export type customerpaymentCardCreateArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * The data needed to create a customerpaymentCard.
     */
    data: XOR<customerpaymentCardCreateInput, customerpaymentCardUncheckedCreateInput>
  }


  /**
   * customerpaymentCard createMany
   */
  export type customerpaymentCardCreateManyArgs = {
    /**
     * The data used to create many customerpaymentCards.
     */
    data: Enumerable<customerpaymentCardCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customerpaymentCard update
   */
  export type customerpaymentCardUpdateArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * The data needed to update a customerpaymentCard.
     */
    data: XOR<customerpaymentCardUpdateInput, customerpaymentCardUncheckedUpdateInput>
    /**
     * Choose, which customerpaymentCard to update.
     */
    where: customerpaymentCardWhereUniqueInput
  }


  /**
   * customerpaymentCard updateMany
   */
  export type customerpaymentCardUpdateManyArgs = {
    /**
     * The data used to update customerpaymentCards.
     */
    data: XOR<customerpaymentCardUpdateManyMutationInput, customerpaymentCardUncheckedUpdateManyInput>
    /**
     * Filter which customerpaymentCards to update
     */
    where?: customerpaymentCardWhereInput
  }


  /**
   * customerpaymentCard upsert
   */
  export type customerpaymentCardUpsertArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * The filter to search for the customerpaymentCard to update in case it exists.
     */
    where: customerpaymentCardWhereUniqueInput
    /**
     * In case the customerpaymentCard found by the `where` argument doesn't exist, create a new customerpaymentCard with this data.
     */
    create: XOR<customerpaymentCardCreateInput, customerpaymentCardUncheckedCreateInput>
    /**
     * In case the customerpaymentCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customerpaymentCardUpdateInput, customerpaymentCardUncheckedUpdateInput>
  }


  /**
   * customerpaymentCard delete
   */
  export type customerpaymentCardDeleteArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
    /**
     * Filter which customerpaymentCard to delete.
     */
    where: customerpaymentCardWhereUniqueInput
  }


  /**
   * customerpaymentCard deleteMany
   */
  export type customerpaymentCardDeleteManyArgs = {
    /**
     * Filter which customerpaymentCards to delete
     */
    where?: customerpaymentCardWhereInput
  }


  /**
   * customerpaymentCard without action
   */
  export type customerpaymentCardArgs = {
    /**
     * Select specific fields to fetch from the customerpaymentCard
     */
    select?: customerpaymentCardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: customerpaymentCardInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BookingScalarFieldEnum: {
    id: 'id',
    startTime: 'startTime',
    endTime: 'endTime',
    isBookedCompeleted: 'isBookedCompeleted',
    userId: 'userId',
    parkingLotId: 'parkingLotId',
    price: 'price',
    totalPrice: 'totalPrice',
    capacityUsedDecremented: 'capacityUsedDecremented'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const CustomerpaymentCardScalarFieldEnum: {
    id: 'id',
    cardId: 'cardId',
    cardBrand: 'cardBrand',
    userName: 'userName',
    userEmail: 'userEmail',
    cardNumber: 'cardNumber',
    cardExpMonth: 'cardExpMonth',
    cardExpYear: 'cardExpYear',
    cardCVC: 'cardCVC',
    country: 'country'
  };

  export type CustomerpaymentCardScalarFieldEnum = (typeof CustomerpaymentCardScalarFieldEnum)[keyof typeof CustomerpaymentCardScalarFieldEnum]


  export const ParkinglotScalarFieldEnum: {
    id: 'id',
    location: 'location',
    capacity: 'capacity',
    capacityUsed: 'capacityUsed',
    hourlyRate: 'hourlyRate',
    isParkDeleted: 'isParkDeleted'
  };

  export type ParkinglotScalarFieldEnum = (typeof ParkinglotScalarFieldEnum)[keyof typeof ParkinglotScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    isuserdeleted: 'isuserdeleted'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VehicletypeScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type VehicletypeScalarFieldEnum = (typeof VehicletypeScalarFieldEnum)[keyof typeof VehicletypeScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type bookingWhereInput = {
    AND?: Enumerable<bookingWhereInput>
    OR?: Enumerable<bookingWhereInput>
    NOT?: Enumerable<bookingWhereInput>
    id?: IntFilter | number
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    isBookedCompeleted?: BoolFilter | boolean
    userId?: IntFilter | number
    parkingLotId?: IntFilter | number
    price?: FloatFilter | number
    totalPrice?: FloatFilter | number
    capacityUsedDecremented?: BoolFilter | boolean
    parkinglot?: XOR<ParkinglotRelationFilter, parkinglotWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type bookingOrderByWithRelationInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isBookedCompeleted?: SortOrder
    userId?: SortOrder
    parkingLotId?: SortOrder
    price?: SortOrder
    totalPrice?: SortOrder
    capacityUsedDecremented?: SortOrder
    parkinglot?: parkinglotOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type bookingWhereUniqueInput = {
    id?: number
  }

  export type bookingOrderByWithAggregationInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isBookedCompeleted?: SortOrder
    userId?: SortOrder
    parkingLotId?: SortOrder
    price?: SortOrder
    totalPrice?: SortOrder
    capacityUsedDecremented?: SortOrder
    _count?: bookingCountOrderByAggregateInput
    _avg?: bookingAvgOrderByAggregateInput
    _max?: bookingMaxOrderByAggregateInput
    _min?: bookingMinOrderByAggregateInput
    _sum?: bookingSumOrderByAggregateInput
  }

  export type bookingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<bookingScalarWhereWithAggregatesInput>
    OR?: Enumerable<bookingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<bookingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    startTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    isBookedCompeleted?: BoolWithAggregatesFilter | boolean
    userId?: IntWithAggregatesFilter | number
    parkingLotId?: IntWithAggregatesFilter | number
    price?: FloatWithAggregatesFilter | number
    totalPrice?: FloatWithAggregatesFilter | number
    capacityUsedDecremented?: BoolWithAggregatesFilter | boolean
  }

  export type parkinglotWhereInput = {
    AND?: Enumerable<parkinglotWhereInput>
    OR?: Enumerable<parkinglotWhereInput>
    NOT?: Enumerable<parkinglotWhereInput>
    id?: IntFilter | number
    location?: StringFilter | string
    capacity?: IntFilter | number
    capacityUsed?: IntFilter | number
    hourlyRate?: FloatFilter | number
    isParkDeleted?: BoolFilter | boolean
    booking?: BookingListRelationFilter
    vehicletype?: VehicletypeListRelationFilter
  }

  export type parkinglotOrderByWithRelationInput = {
    id?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    capacityUsed?: SortOrder
    hourlyRate?: SortOrder
    isParkDeleted?: SortOrder
    booking?: bookingOrderByRelationAggregateInput
    vehicletype?: vehicletypeOrderByRelationAggregateInput
  }

  export type parkinglotWhereUniqueInput = {
    id?: number
  }

  export type parkinglotOrderByWithAggregationInput = {
    id?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    capacityUsed?: SortOrder
    hourlyRate?: SortOrder
    isParkDeleted?: SortOrder
    _count?: parkinglotCountOrderByAggregateInput
    _avg?: parkinglotAvgOrderByAggregateInput
    _max?: parkinglotMaxOrderByAggregateInput
    _min?: parkinglotMinOrderByAggregateInput
    _sum?: parkinglotSumOrderByAggregateInput
  }

  export type parkinglotScalarWhereWithAggregatesInput = {
    AND?: Enumerable<parkinglotScalarWhereWithAggregatesInput>
    OR?: Enumerable<parkinglotScalarWhereWithAggregatesInput>
    NOT?: Enumerable<parkinglotScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    location?: StringWithAggregatesFilter | string
    capacity?: IntWithAggregatesFilter | number
    capacityUsed?: IntWithAggregatesFilter | number
    hourlyRate?: FloatWithAggregatesFilter | number
    isParkDeleted?: BoolWithAggregatesFilter | boolean
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    isuserdeleted?: BoolFilter | boolean
    booking?: BookingListRelationFilter
    customersCard?: CustomerpaymentCardListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isuserdeleted?: SortOrder
    booking?: bookingOrderByRelationAggregateInput
    customersCard?: customerpaymentCardOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
    name_email?: userNameEmailCompoundUniqueInput
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isuserdeleted?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    isuserdeleted?: BoolWithAggregatesFilter | boolean
  }

  export type vehicletypeWhereInput = {
    AND?: Enumerable<vehicletypeWhereInput>
    OR?: Enumerable<vehicletypeWhereInput>
    NOT?: Enumerable<vehicletypeWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    parkinglot?: ParkinglotListRelationFilter
  }

  export type vehicletypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    parkinglot?: parkinglotOrderByRelationAggregateInput
  }

  export type vehicletypeWhereUniqueInput = {
    id?: number
  }

  export type vehicletypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: vehicletypeCountOrderByAggregateInput
    _avg?: vehicletypeAvgOrderByAggregateInput
    _max?: vehicletypeMaxOrderByAggregateInput
    _min?: vehicletypeMinOrderByAggregateInput
    _sum?: vehicletypeSumOrderByAggregateInput
  }

  export type vehicletypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<vehicletypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<vehicletypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<vehicletypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
  }

  export type customerpaymentCardWhereInput = {
    AND?: Enumerable<customerpaymentCardWhereInput>
    OR?: Enumerable<customerpaymentCardWhereInput>
    NOT?: Enumerable<customerpaymentCardWhereInput>
    id?: IntFilter | number
    cardId?: StringFilter | string
    cardBrand?: StringFilter | string
    userName?: StringFilter | string
    userEmail?: StringFilter | string
    cardNumber?: StringFilter | string
    cardExpMonth?: StringFilter | string
    cardExpYear?: StringFilter | string
    cardCVC?: StringFilter | string
    country?: StringFilter | string
    userCard?: XOR<UserRelationFilter, userWhereInput>
  }

  export type customerpaymentCardOrderByWithRelationInput = {
    id?: SortOrder
    cardId?: SortOrder
    cardBrand?: SortOrder
    userName?: SortOrder
    userEmail?: SortOrder
    cardNumber?: SortOrder
    cardExpMonth?: SortOrder
    cardExpYear?: SortOrder
    cardCVC?: SortOrder
    country?: SortOrder
    userCard?: userOrderByWithRelationInput
  }

  export type customerpaymentCardWhereUniqueInput = {
    id?: number
  }

  export type customerpaymentCardOrderByWithAggregationInput = {
    id?: SortOrder
    cardId?: SortOrder
    cardBrand?: SortOrder
    userName?: SortOrder
    userEmail?: SortOrder
    cardNumber?: SortOrder
    cardExpMonth?: SortOrder
    cardExpYear?: SortOrder
    cardCVC?: SortOrder
    country?: SortOrder
    _count?: customerpaymentCardCountOrderByAggregateInput
    _avg?: customerpaymentCardAvgOrderByAggregateInput
    _max?: customerpaymentCardMaxOrderByAggregateInput
    _min?: customerpaymentCardMinOrderByAggregateInput
    _sum?: customerpaymentCardSumOrderByAggregateInput
  }

  export type customerpaymentCardScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customerpaymentCardScalarWhereWithAggregatesInput>
    OR?: Enumerable<customerpaymentCardScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customerpaymentCardScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cardId?: StringWithAggregatesFilter | string
    cardBrand?: StringWithAggregatesFilter | string
    userName?: StringWithAggregatesFilter | string
    userEmail?: StringWithAggregatesFilter | string
    cardNumber?: StringWithAggregatesFilter | string
    cardExpMonth?: StringWithAggregatesFilter | string
    cardExpYear?: StringWithAggregatesFilter | string
    cardCVC?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
  }

  export type bookingCreateInput = {
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
    parkinglot: parkinglotCreateNestedOneWithoutBookingInput
    user: userCreateNestedOneWithoutBookingInput
  }

  export type bookingUncheckedCreateInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    userId: number
    parkingLotId: number
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
  }

  export type bookingUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
    parkinglot?: parkinglotUpdateOneRequiredWithoutBookingNestedInput
    user?: userUpdateOneRequiredWithoutBookingNestedInput
  }

  export type bookingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    parkingLotId?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
  }

  export type bookingCreateManyInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    userId: number
    parkingLotId: number
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
  }

  export type bookingUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
  }

  export type bookingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    parkingLotId?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
  }

  export type parkinglotCreateInput = {
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted?: boolean
    booking?: bookingCreateNestedManyWithoutParkinglotInput
    vehicletype?: vehicletypeCreateNestedManyWithoutParkinglotInput
  }

  export type parkinglotUncheckedCreateInput = {
    id?: number
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted?: boolean
    booking?: bookingUncheckedCreateNestedManyWithoutParkinglotInput
    vehicletype?: vehicletypeUncheckedCreateNestedManyWithoutParkinglotInput
  }

  export type parkinglotUpdateInput = {
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUpdateManyWithoutParkinglotNestedInput
    vehicletype?: vehicletypeUpdateManyWithoutParkinglotNestedInput
  }

  export type parkinglotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUncheckedUpdateManyWithoutParkinglotNestedInput
    vehicletype?: vehicletypeUncheckedUpdateManyWithoutParkinglotNestedInput
  }

  export type parkinglotCreateManyInput = {
    id?: number
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted?: boolean
  }

  export type parkinglotUpdateManyMutationInput = {
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type parkinglotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userCreateInput = {
    name: string
    email: string
    password: string
    isuserdeleted?: boolean
    booking?: bookingCreateNestedManyWithoutUserInput
    customersCard?: customerpaymentCardCreateNestedManyWithoutUserCardInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    isuserdeleted?: boolean
    booking?: bookingUncheckedCreateNestedManyWithoutUserInput
    customersCard?: customerpaymentCardUncheckedCreateNestedManyWithoutUserCardInput
  }

  export type userUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUpdateManyWithoutUserNestedInput
    customersCard?: customerpaymentCardUpdateManyWithoutUserCardNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUncheckedUpdateManyWithoutUserNestedInput
    customersCard?: customerpaymentCardUncheckedUpdateManyWithoutUserCardNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    isuserdeleted?: boolean
  }

  export type userUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type vehicletypeCreateInput = {
    type: string
    parkinglot?: parkinglotCreateNestedManyWithoutVehicletypeInput
  }

  export type vehicletypeUncheckedCreateInput = {
    id?: number
    type: string
    parkinglot?: parkinglotUncheckedCreateNestedManyWithoutVehicletypeInput
  }

  export type vehicletypeUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    parkinglot?: parkinglotUpdateManyWithoutVehicletypeNestedInput
  }

  export type vehicletypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    parkinglot?: parkinglotUncheckedUpdateManyWithoutVehicletypeNestedInput
  }

  export type vehicletypeCreateManyInput = {
    id?: number
    type: string
  }

  export type vehicletypeUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type vehicletypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type customerpaymentCardCreateInput = {
    cardId: string
    cardBrand: string
    cardNumber: string
    cardExpMonth: string
    cardExpYear: string
    cardCVC: string
    country: string
    userCard: userCreateNestedOneWithoutCustomersCardInput
  }

  export type customerpaymentCardUncheckedCreateInput = {
    id?: number
    cardId: string
    cardBrand: string
    userName: string
    userEmail: string
    cardNumber: string
    cardExpMonth: string
    cardExpYear: string
    cardCVC: string
    country: string
  }

  export type customerpaymentCardUpdateInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    cardBrand?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardExpMonth?: StringFieldUpdateOperationsInput | string
    cardExpYear?: StringFieldUpdateOperationsInput | string
    cardCVC?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    userCard?: userUpdateOneRequiredWithoutCustomersCardNestedInput
  }

  export type customerpaymentCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: StringFieldUpdateOperationsInput | string
    cardBrand?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardExpMonth?: StringFieldUpdateOperationsInput | string
    cardExpYear?: StringFieldUpdateOperationsInput | string
    cardCVC?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type customerpaymentCardCreateManyInput = {
    id?: number
    cardId: string
    cardBrand: string
    userName: string
    userEmail: string
    cardNumber: string
    cardExpMonth: string
    cardExpYear: string
    cardCVC: string
    country: string
  }

  export type customerpaymentCardUpdateManyMutationInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    cardBrand?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardExpMonth?: StringFieldUpdateOperationsInput | string
    cardExpYear?: StringFieldUpdateOperationsInput | string
    cardCVC?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type customerpaymentCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: StringFieldUpdateOperationsInput | string
    cardBrand?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardExpMonth?: StringFieldUpdateOperationsInput | string
    cardExpYear?: StringFieldUpdateOperationsInput | string
    cardCVC?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ParkinglotRelationFilter = {
    is?: parkinglotWhereInput
    isNot?: parkinglotWhereInput
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type bookingCountOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isBookedCompeleted?: SortOrder
    userId?: SortOrder
    parkingLotId?: SortOrder
    price?: SortOrder
    totalPrice?: SortOrder
    capacityUsedDecremented?: SortOrder
  }

  export type bookingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    parkingLotId?: SortOrder
    price?: SortOrder
    totalPrice?: SortOrder
  }

  export type bookingMaxOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isBookedCompeleted?: SortOrder
    userId?: SortOrder
    parkingLotId?: SortOrder
    price?: SortOrder
    totalPrice?: SortOrder
    capacityUsedDecremented?: SortOrder
  }

  export type bookingMinOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isBookedCompeleted?: SortOrder
    userId?: SortOrder
    parkingLotId?: SortOrder
    price?: SortOrder
    totalPrice?: SortOrder
    capacityUsedDecremented?: SortOrder
  }

  export type bookingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    parkingLotId?: SortOrder
    price?: SortOrder
    totalPrice?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BookingListRelationFilter = {
    every?: bookingWhereInput
    some?: bookingWhereInput
    none?: bookingWhereInput
  }

  export type VehicletypeListRelationFilter = {
    every?: vehicletypeWhereInput
    some?: vehicletypeWhereInput
    none?: vehicletypeWhereInput
  }

  export type bookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type vehicletypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type parkinglotCountOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    capacityUsed?: SortOrder
    hourlyRate?: SortOrder
    isParkDeleted?: SortOrder
  }

  export type parkinglotAvgOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    capacityUsed?: SortOrder
    hourlyRate?: SortOrder
  }

  export type parkinglotMaxOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    capacityUsed?: SortOrder
    hourlyRate?: SortOrder
    isParkDeleted?: SortOrder
  }

  export type parkinglotMinOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    capacityUsed?: SortOrder
    hourlyRate?: SortOrder
    isParkDeleted?: SortOrder
  }

  export type parkinglotSumOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
    capacityUsed?: SortOrder
    hourlyRate?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type CustomerpaymentCardListRelationFilter = {
    every?: customerpaymentCardWhereInput
    some?: customerpaymentCardWhereInput
    none?: customerpaymentCardWhereInput
  }

  export type customerpaymentCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userNameEmailCompoundUniqueInput = {
    name: string
    email: string
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isuserdeleted?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isuserdeleted?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isuserdeleted?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParkinglotListRelationFilter = {
    every?: parkinglotWhereInput
    some?: parkinglotWhereInput
    none?: parkinglotWhereInput
  }

  export type parkinglotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type vehicletypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type vehicletypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type vehicletypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type vehicletypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type vehicletypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type customerpaymentCardCountOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    cardBrand?: SortOrder
    userName?: SortOrder
    userEmail?: SortOrder
    cardNumber?: SortOrder
    cardExpMonth?: SortOrder
    cardExpYear?: SortOrder
    cardCVC?: SortOrder
    country?: SortOrder
  }

  export type customerpaymentCardAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type customerpaymentCardMaxOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    cardBrand?: SortOrder
    userName?: SortOrder
    userEmail?: SortOrder
    cardNumber?: SortOrder
    cardExpMonth?: SortOrder
    cardExpYear?: SortOrder
    cardCVC?: SortOrder
    country?: SortOrder
  }

  export type customerpaymentCardMinOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    cardBrand?: SortOrder
    userName?: SortOrder
    userEmail?: SortOrder
    cardNumber?: SortOrder
    cardExpMonth?: SortOrder
    cardExpYear?: SortOrder
    cardCVC?: SortOrder
    country?: SortOrder
  }

  export type customerpaymentCardSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type parkinglotCreateNestedOneWithoutBookingInput = {
    create?: XOR<parkinglotCreateWithoutBookingInput, parkinglotUncheckedCreateWithoutBookingInput>
    connectOrCreate?: parkinglotCreateOrConnectWithoutBookingInput
    connect?: parkinglotWhereUniqueInput
  }

  export type userCreateNestedOneWithoutBookingInput = {
    create?: XOR<userCreateWithoutBookingInput, userUncheckedCreateWithoutBookingInput>
    connectOrCreate?: userCreateOrConnectWithoutBookingInput
    connect?: userWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type parkinglotUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<parkinglotCreateWithoutBookingInput, parkinglotUncheckedCreateWithoutBookingInput>
    connectOrCreate?: parkinglotCreateOrConnectWithoutBookingInput
    upsert?: parkinglotUpsertWithoutBookingInput
    connect?: parkinglotWhereUniqueInput
    update?: XOR<parkinglotUpdateWithoutBookingInput, parkinglotUncheckedUpdateWithoutBookingInput>
  }

  export type userUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<userCreateWithoutBookingInput, userUncheckedCreateWithoutBookingInput>
    connectOrCreate?: userCreateOrConnectWithoutBookingInput
    upsert?: userUpsertWithoutBookingInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutBookingInput, userUncheckedUpdateWithoutBookingInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type bookingCreateNestedManyWithoutParkinglotInput = {
    create?: XOR<Enumerable<bookingCreateWithoutParkinglotInput>, Enumerable<bookingUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutParkinglotInput>
    createMany?: bookingCreateManyParkinglotInputEnvelope
    connect?: Enumerable<bookingWhereUniqueInput>
  }

  export type vehicletypeCreateNestedManyWithoutParkinglotInput = {
    create?: XOR<Enumerable<vehicletypeCreateWithoutParkinglotInput>, Enumerable<vehicletypeUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<vehicletypeCreateOrConnectWithoutParkinglotInput>
    connect?: Enumerable<vehicletypeWhereUniqueInput>
  }

  export type bookingUncheckedCreateNestedManyWithoutParkinglotInput = {
    create?: XOR<Enumerable<bookingCreateWithoutParkinglotInput>, Enumerable<bookingUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutParkinglotInput>
    createMany?: bookingCreateManyParkinglotInputEnvelope
    connect?: Enumerable<bookingWhereUniqueInput>
  }

  export type vehicletypeUncheckedCreateNestedManyWithoutParkinglotInput = {
    create?: XOR<Enumerable<vehicletypeCreateWithoutParkinglotInput>, Enumerable<vehicletypeUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<vehicletypeCreateOrConnectWithoutParkinglotInput>
    connect?: Enumerable<vehicletypeWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type bookingUpdateManyWithoutParkinglotNestedInput = {
    create?: XOR<Enumerable<bookingCreateWithoutParkinglotInput>, Enumerable<bookingUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutParkinglotInput>
    upsert?: Enumerable<bookingUpsertWithWhereUniqueWithoutParkinglotInput>
    createMany?: bookingCreateManyParkinglotInputEnvelope
    set?: Enumerable<bookingWhereUniqueInput>
    disconnect?: Enumerable<bookingWhereUniqueInput>
    delete?: Enumerable<bookingWhereUniqueInput>
    connect?: Enumerable<bookingWhereUniqueInput>
    update?: Enumerable<bookingUpdateWithWhereUniqueWithoutParkinglotInput>
    updateMany?: Enumerable<bookingUpdateManyWithWhereWithoutParkinglotInput>
    deleteMany?: Enumerable<bookingScalarWhereInput>
  }

  export type vehicletypeUpdateManyWithoutParkinglotNestedInput = {
    create?: XOR<Enumerable<vehicletypeCreateWithoutParkinglotInput>, Enumerable<vehicletypeUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<vehicletypeCreateOrConnectWithoutParkinglotInput>
    upsert?: Enumerable<vehicletypeUpsertWithWhereUniqueWithoutParkinglotInput>
    set?: Enumerable<vehicletypeWhereUniqueInput>
    disconnect?: Enumerable<vehicletypeWhereUniqueInput>
    delete?: Enumerable<vehicletypeWhereUniqueInput>
    connect?: Enumerable<vehicletypeWhereUniqueInput>
    update?: Enumerable<vehicletypeUpdateWithWhereUniqueWithoutParkinglotInput>
    updateMany?: Enumerable<vehicletypeUpdateManyWithWhereWithoutParkinglotInput>
    deleteMany?: Enumerable<vehicletypeScalarWhereInput>
  }

  export type bookingUncheckedUpdateManyWithoutParkinglotNestedInput = {
    create?: XOR<Enumerable<bookingCreateWithoutParkinglotInput>, Enumerable<bookingUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutParkinglotInput>
    upsert?: Enumerable<bookingUpsertWithWhereUniqueWithoutParkinglotInput>
    createMany?: bookingCreateManyParkinglotInputEnvelope
    set?: Enumerable<bookingWhereUniqueInput>
    disconnect?: Enumerable<bookingWhereUniqueInput>
    delete?: Enumerable<bookingWhereUniqueInput>
    connect?: Enumerable<bookingWhereUniqueInput>
    update?: Enumerable<bookingUpdateWithWhereUniqueWithoutParkinglotInput>
    updateMany?: Enumerable<bookingUpdateManyWithWhereWithoutParkinglotInput>
    deleteMany?: Enumerable<bookingScalarWhereInput>
  }

  export type vehicletypeUncheckedUpdateManyWithoutParkinglotNestedInput = {
    create?: XOR<Enumerable<vehicletypeCreateWithoutParkinglotInput>, Enumerable<vehicletypeUncheckedCreateWithoutParkinglotInput>>
    connectOrCreate?: Enumerable<vehicletypeCreateOrConnectWithoutParkinglotInput>
    upsert?: Enumerable<vehicletypeUpsertWithWhereUniqueWithoutParkinglotInput>
    set?: Enumerable<vehicletypeWhereUniqueInput>
    disconnect?: Enumerable<vehicletypeWhereUniqueInput>
    delete?: Enumerable<vehicletypeWhereUniqueInput>
    connect?: Enumerable<vehicletypeWhereUniqueInput>
    update?: Enumerable<vehicletypeUpdateWithWhereUniqueWithoutParkinglotInput>
    updateMany?: Enumerable<vehicletypeUpdateManyWithWhereWithoutParkinglotInput>
    deleteMany?: Enumerable<vehicletypeScalarWhereInput>
  }

  export type bookingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<bookingCreateWithoutUserInput>, Enumerable<bookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutUserInput>
    createMany?: bookingCreateManyUserInputEnvelope
    connect?: Enumerable<bookingWhereUniqueInput>
  }

  export type customerpaymentCardCreateNestedManyWithoutUserCardInput = {
    create?: XOR<Enumerable<customerpaymentCardCreateWithoutUserCardInput>, Enumerable<customerpaymentCardUncheckedCreateWithoutUserCardInput>>
    connectOrCreate?: Enumerable<customerpaymentCardCreateOrConnectWithoutUserCardInput>
    createMany?: customerpaymentCardCreateManyUserCardInputEnvelope
    connect?: Enumerable<customerpaymentCardWhereUniqueInput>
  }

  export type bookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<bookingCreateWithoutUserInput>, Enumerable<bookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutUserInput>
    createMany?: bookingCreateManyUserInputEnvelope
    connect?: Enumerable<bookingWhereUniqueInput>
  }

  export type customerpaymentCardUncheckedCreateNestedManyWithoutUserCardInput = {
    create?: XOR<Enumerable<customerpaymentCardCreateWithoutUserCardInput>, Enumerable<customerpaymentCardUncheckedCreateWithoutUserCardInput>>
    connectOrCreate?: Enumerable<customerpaymentCardCreateOrConnectWithoutUserCardInput>
    createMany?: customerpaymentCardCreateManyUserCardInputEnvelope
    connect?: Enumerable<customerpaymentCardWhereUniqueInput>
  }

  export type bookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<bookingCreateWithoutUserInput>, Enumerable<bookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<bookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: bookingCreateManyUserInputEnvelope
    set?: Enumerable<bookingWhereUniqueInput>
    disconnect?: Enumerable<bookingWhereUniqueInput>
    delete?: Enumerable<bookingWhereUniqueInput>
    connect?: Enumerable<bookingWhereUniqueInput>
    update?: Enumerable<bookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<bookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<bookingScalarWhereInput>
  }

  export type customerpaymentCardUpdateManyWithoutUserCardNestedInput = {
    create?: XOR<Enumerable<customerpaymentCardCreateWithoutUserCardInput>, Enumerable<customerpaymentCardUncheckedCreateWithoutUserCardInput>>
    connectOrCreate?: Enumerable<customerpaymentCardCreateOrConnectWithoutUserCardInput>
    upsert?: Enumerable<customerpaymentCardUpsertWithWhereUniqueWithoutUserCardInput>
    createMany?: customerpaymentCardCreateManyUserCardInputEnvelope
    set?: Enumerable<customerpaymentCardWhereUniqueInput>
    disconnect?: Enumerable<customerpaymentCardWhereUniqueInput>
    delete?: Enumerable<customerpaymentCardWhereUniqueInput>
    connect?: Enumerable<customerpaymentCardWhereUniqueInput>
    update?: Enumerable<customerpaymentCardUpdateWithWhereUniqueWithoutUserCardInput>
    updateMany?: Enumerable<customerpaymentCardUpdateManyWithWhereWithoutUserCardInput>
    deleteMany?: Enumerable<customerpaymentCardScalarWhereInput>
  }

  export type bookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<bookingCreateWithoutUserInput>, Enumerable<bookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<bookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<bookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: bookingCreateManyUserInputEnvelope
    set?: Enumerable<bookingWhereUniqueInput>
    disconnect?: Enumerable<bookingWhereUniqueInput>
    delete?: Enumerable<bookingWhereUniqueInput>
    connect?: Enumerable<bookingWhereUniqueInput>
    update?: Enumerable<bookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<bookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<bookingScalarWhereInput>
  }

  export type customerpaymentCardUncheckedUpdateManyWithoutUserCardNestedInput = {
    create?: XOR<Enumerable<customerpaymentCardCreateWithoutUserCardInput>, Enumerable<customerpaymentCardUncheckedCreateWithoutUserCardInput>>
    connectOrCreate?: Enumerable<customerpaymentCardCreateOrConnectWithoutUserCardInput>
    upsert?: Enumerable<customerpaymentCardUpsertWithWhereUniqueWithoutUserCardInput>
    createMany?: customerpaymentCardCreateManyUserCardInputEnvelope
    set?: Enumerable<customerpaymentCardWhereUniqueInput>
    disconnect?: Enumerable<customerpaymentCardWhereUniqueInput>
    delete?: Enumerable<customerpaymentCardWhereUniqueInput>
    connect?: Enumerable<customerpaymentCardWhereUniqueInput>
    update?: Enumerable<customerpaymentCardUpdateWithWhereUniqueWithoutUserCardInput>
    updateMany?: Enumerable<customerpaymentCardUpdateManyWithWhereWithoutUserCardInput>
    deleteMany?: Enumerable<customerpaymentCardScalarWhereInput>
  }

  export type parkinglotCreateNestedManyWithoutVehicletypeInput = {
    create?: XOR<Enumerable<parkinglotCreateWithoutVehicletypeInput>, Enumerable<parkinglotUncheckedCreateWithoutVehicletypeInput>>
    connectOrCreate?: Enumerable<parkinglotCreateOrConnectWithoutVehicletypeInput>
    connect?: Enumerable<parkinglotWhereUniqueInput>
  }

  export type parkinglotUncheckedCreateNestedManyWithoutVehicletypeInput = {
    create?: XOR<Enumerable<parkinglotCreateWithoutVehicletypeInput>, Enumerable<parkinglotUncheckedCreateWithoutVehicletypeInput>>
    connectOrCreate?: Enumerable<parkinglotCreateOrConnectWithoutVehicletypeInput>
    connect?: Enumerable<parkinglotWhereUniqueInput>
  }

  export type parkinglotUpdateManyWithoutVehicletypeNestedInput = {
    create?: XOR<Enumerable<parkinglotCreateWithoutVehicletypeInput>, Enumerable<parkinglotUncheckedCreateWithoutVehicletypeInput>>
    connectOrCreate?: Enumerable<parkinglotCreateOrConnectWithoutVehicletypeInput>
    upsert?: Enumerable<parkinglotUpsertWithWhereUniqueWithoutVehicletypeInput>
    set?: Enumerable<parkinglotWhereUniqueInput>
    disconnect?: Enumerable<parkinglotWhereUniqueInput>
    delete?: Enumerable<parkinglotWhereUniqueInput>
    connect?: Enumerable<parkinglotWhereUniqueInput>
    update?: Enumerable<parkinglotUpdateWithWhereUniqueWithoutVehicletypeInput>
    updateMany?: Enumerable<parkinglotUpdateManyWithWhereWithoutVehicletypeInput>
    deleteMany?: Enumerable<parkinglotScalarWhereInput>
  }

  export type parkinglotUncheckedUpdateManyWithoutVehicletypeNestedInput = {
    create?: XOR<Enumerable<parkinglotCreateWithoutVehicletypeInput>, Enumerable<parkinglotUncheckedCreateWithoutVehicletypeInput>>
    connectOrCreate?: Enumerable<parkinglotCreateOrConnectWithoutVehicletypeInput>
    upsert?: Enumerable<parkinglotUpsertWithWhereUniqueWithoutVehicletypeInput>
    set?: Enumerable<parkinglotWhereUniqueInput>
    disconnect?: Enumerable<parkinglotWhereUniqueInput>
    delete?: Enumerable<parkinglotWhereUniqueInput>
    connect?: Enumerable<parkinglotWhereUniqueInput>
    update?: Enumerable<parkinglotUpdateWithWhereUniqueWithoutVehicletypeInput>
    updateMany?: Enumerable<parkinglotUpdateManyWithWhereWithoutVehicletypeInput>
    deleteMany?: Enumerable<parkinglotScalarWhereInput>
  }

  export type userCreateNestedOneWithoutCustomersCardInput = {
    create?: XOR<userCreateWithoutCustomersCardInput, userUncheckedCreateWithoutCustomersCardInput>
    connectOrCreate?: userCreateOrConnectWithoutCustomersCardInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutCustomersCardNestedInput = {
    create?: XOR<userCreateWithoutCustomersCardInput, userUncheckedCreateWithoutCustomersCardInput>
    connectOrCreate?: userCreateOrConnectWithoutCustomersCardInput
    upsert?: userUpsertWithoutCustomersCardInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutCustomersCardInput, userUncheckedUpdateWithoutCustomersCardInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type parkinglotCreateWithoutBookingInput = {
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted?: boolean
    vehicletype?: vehicletypeCreateNestedManyWithoutParkinglotInput
  }

  export type parkinglotUncheckedCreateWithoutBookingInput = {
    id?: number
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted?: boolean
    vehicletype?: vehicletypeUncheckedCreateNestedManyWithoutParkinglotInput
  }

  export type parkinglotCreateOrConnectWithoutBookingInput = {
    where: parkinglotWhereUniqueInput
    create: XOR<parkinglotCreateWithoutBookingInput, parkinglotUncheckedCreateWithoutBookingInput>
  }

  export type userCreateWithoutBookingInput = {
    name: string
    email: string
    password: string
    isuserdeleted?: boolean
    customersCard?: customerpaymentCardCreateNestedManyWithoutUserCardInput
  }

  export type userUncheckedCreateWithoutBookingInput = {
    id?: number
    name: string
    email: string
    password: string
    isuserdeleted?: boolean
    customersCard?: customerpaymentCardUncheckedCreateNestedManyWithoutUserCardInput
  }

  export type userCreateOrConnectWithoutBookingInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutBookingInput, userUncheckedCreateWithoutBookingInput>
  }

  export type parkinglotUpsertWithoutBookingInput = {
    update: XOR<parkinglotUpdateWithoutBookingInput, parkinglotUncheckedUpdateWithoutBookingInput>
    create: XOR<parkinglotCreateWithoutBookingInput, parkinglotUncheckedCreateWithoutBookingInput>
  }

  export type parkinglotUpdateWithoutBookingInput = {
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
    vehicletype?: vehicletypeUpdateManyWithoutParkinglotNestedInput
  }

  export type parkinglotUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
    vehicletype?: vehicletypeUncheckedUpdateManyWithoutParkinglotNestedInput
  }

  export type userUpsertWithoutBookingInput = {
    update: XOR<userUpdateWithoutBookingInput, userUncheckedUpdateWithoutBookingInput>
    create: XOR<userCreateWithoutBookingInput, userUncheckedCreateWithoutBookingInput>
  }

  export type userUpdateWithoutBookingInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
    customersCard?: customerpaymentCardUpdateManyWithoutUserCardNestedInput
  }

  export type userUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
    customersCard?: customerpaymentCardUncheckedUpdateManyWithoutUserCardNestedInput
  }

  export type bookingCreateWithoutParkinglotInput = {
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
    user: userCreateNestedOneWithoutBookingInput
  }

  export type bookingUncheckedCreateWithoutParkinglotInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    userId: number
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
  }

  export type bookingCreateOrConnectWithoutParkinglotInput = {
    where: bookingWhereUniqueInput
    create: XOR<bookingCreateWithoutParkinglotInput, bookingUncheckedCreateWithoutParkinglotInput>
  }

  export type bookingCreateManyParkinglotInputEnvelope = {
    data: Enumerable<bookingCreateManyParkinglotInput>
    skipDuplicates?: boolean
  }

  export type vehicletypeCreateWithoutParkinglotInput = {
    type: string
  }

  export type vehicletypeUncheckedCreateWithoutParkinglotInput = {
    id?: number
    type: string
  }

  export type vehicletypeCreateOrConnectWithoutParkinglotInput = {
    where: vehicletypeWhereUniqueInput
    create: XOR<vehicletypeCreateWithoutParkinglotInput, vehicletypeUncheckedCreateWithoutParkinglotInput>
  }

  export type bookingUpsertWithWhereUniqueWithoutParkinglotInput = {
    where: bookingWhereUniqueInput
    update: XOR<bookingUpdateWithoutParkinglotInput, bookingUncheckedUpdateWithoutParkinglotInput>
    create: XOR<bookingCreateWithoutParkinglotInput, bookingUncheckedCreateWithoutParkinglotInput>
  }

  export type bookingUpdateWithWhereUniqueWithoutParkinglotInput = {
    where: bookingWhereUniqueInput
    data: XOR<bookingUpdateWithoutParkinglotInput, bookingUncheckedUpdateWithoutParkinglotInput>
  }

  export type bookingUpdateManyWithWhereWithoutParkinglotInput = {
    where: bookingScalarWhereInput
    data: XOR<bookingUpdateManyMutationInput, bookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type bookingScalarWhereInput = {
    AND?: Enumerable<bookingScalarWhereInput>
    OR?: Enumerable<bookingScalarWhereInput>
    NOT?: Enumerable<bookingScalarWhereInput>
    id?: IntFilter | number
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    isBookedCompeleted?: BoolFilter | boolean
    userId?: IntFilter | number
    parkingLotId?: IntFilter | number
    price?: FloatFilter | number
    totalPrice?: FloatFilter | number
    capacityUsedDecremented?: BoolFilter | boolean
  }

  export type vehicletypeUpsertWithWhereUniqueWithoutParkinglotInput = {
    where: vehicletypeWhereUniqueInput
    update: XOR<vehicletypeUpdateWithoutParkinglotInput, vehicletypeUncheckedUpdateWithoutParkinglotInput>
    create: XOR<vehicletypeCreateWithoutParkinglotInput, vehicletypeUncheckedCreateWithoutParkinglotInput>
  }

  export type vehicletypeUpdateWithWhereUniqueWithoutParkinglotInput = {
    where: vehicletypeWhereUniqueInput
    data: XOR<vehicletypeUpdateWithoutParkinglotInput, vehicletypeUncheckedUpdateWithoutParkinglotInput>
  }

  export type vehicletypeUpdateManyWithWhereWithoutParkinglotInput = {
    where: vehicletypeScalarWhereInput
    data: XOR<vehicletypeUpdateManyMutationInput, vehicletypeUncheckedUpdateManyWithoutVehicletypeInput>
  }

  export type vehicletypeScalarWhereInput = {
    AND?: Enumerable<vehicletypeScalarWhereInput>
    OR?: Enumerable<vehicletypeScalarWhereInput>
    NOT?: Enumerable<vehicletypeScalarWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
  }

  export type bookingCreateWithoutUserInput = {
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
    parkinglot: parkinglotCreateNestedOneWithoutBookingInput
  }

  export type bookingUncheckedCreateWithoutUserInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    parkingLotId: number
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
  }

  export type bookingCreateOrConnectWithoutUserInput = {
    where: bookingWhereUniqueInput
    create: XOR<bookingCreateWithoutUserInput, bookingUncheckedCreateWithoutUserInput>
  }

  export type bookingCreateManyUserInputEnvelope = {
    data: Enumerable<bookingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type customerpaymentCardCreateWithoutUserCardInput = {
    cardId: string
    cardBrand: string
    cardNumber: string
    cardExpMonth: string
    cardExpYear: string
    cardCVC: string
    country: string
  }

  export type customerpaymentCardUncheckedCreateWithoutUserCardInput = {
    id?: number
    cardId: string
    cardBrand: string
    cardNumber: string
    cardExpMonth: string
    cardExpYear: string
    cardCVC: string
    country: string
  }

  export type customerpaymentCardCreateOrConnectWithoutUserCardInput = {
    where: customerpaymentCardWhereUniqueInput
    create: XOR<customerpaymentCardCreateWithoutUserCardInput, customerpaymentCardUncheckedCreateWithoutUserCardInput>
  }

  export type customerpaymentCardCreateManyUserCardInputEnvelope = {
    data: Enumerable<customerpaymentCardCreateManyUserCardInput>
    skipDuplicates?: boolean
  }

  export type bookingUpsertWithWhereUniqueWithoutUserInput = {
    where: bookingWhereUniqueInput
    update: XOR<bookingUpdateWithoutUserInput, bookingUncheckedUpdateWithoutUserInput>
    create: XOR<bookingCreateWithoutUserInput, bookingUncheckedCreateWithoutUserInput>
  }

  export type bookingUpdateWithWhereUniqueWithoutUserInput = {
    where: bookingWhereUniqueInput
    data: XOR<bookingUpdateWithoutUserInput, bookingUncheckedUpdateWithoutUserInput>
  }

  export type bookingUpdateManyWithWhereWithoutUserInput = {
    where: bookingScalarWhereInput
    data: XOR<bookingUpdateManyMutationInput, bookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type customerpaymentCardUpsertWithWhereUniqueWithoutUserCardInput = {
    where: customerpaymentCardWhereUniqueInput
    update: XOR<customerpaymentCardUpdateWithoutUserCardInput, customerpaymentCardUncheckedUpdateWithoutUserCardInput>
    create: XOR<customerpaymentCardCreateWithoutUserCardInput, customerpaymentCardUncheckedCreateWithoutUserCardInput>
  }

  export type customerpaymentCardUpdateWithWhereUniqueWithoutUserCardInput = {
    where: customerpaymentCardWhereUniqueInput
    data: XOR<customerpaymentCardUpdateWithoutUserCardInput, customerpaymentCardUncheckedUpdateWithoutUserCardInput>
  }

  export type customerpaymentCardUpdateManyWithWhereWithoutUserCardInput = {
    where: customerpaymentCardScalarWhereInput
    data: XOR<customerpaymentCardUpdateManyMutationInput, customerpaymentCardUncheckedUpdateManyWithoutCustomersCardInput>
  }

  export type customerpaymentCardScalarWhereInput = {
    AND?: Enumerable<customerpaymentCardScalarWhereInput>
    OR?: Enumerable<customerpaymentCardScalarWhereInput>
    NOT?: Enumerable<customerpaymentCardScalarWhereInput>
    id?: IntFilter | number
    cardId?: StringFilter | string
    cardBrand?: StringFilter | string
    userName?: StringFilter | string
    userEmail?: StringFilter | string
    cardNumber?: StringFilter | string
    cardExpMonth?: StringFilter | string
    cardExpYear?: StringFilter | string
    cardCVC?: StringFilter | string
    country?: StringFilter | string
  }

  export type parkinglotCreateWithoutVehicletypeInput = {
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted?: boolean
    booking?: bookingCreateNestedManyWithoutParkinglotInput
  }

  export type parkinglotUncheckedCreateWithoutVehicletypeInput = {
    id?: number
    location: string
    capacity: number
    capacityUsed: number
    hourlyRate: number
    isParkDeleted?: boolean
    booking?: bookingUncheckedCreateNestedManyWithoutParkinglotInput
  }

  export type parkinglotCreateOrConnectWithoutVehicletypeInput = {
    where: parkinglotWhereUniqueInput
    create: XOR<parkinglotCreateWithoutVehicletypeInput, parkinglotUncheckedCreateWithoutVehicletypeInput>
  }

  export type parkinglotUpsertWithWhereUniqueWithoutVehicletypeInput = {
    where: parkinglotWhereUniqueInput
    update: XOR<parkinglotUpdateWithoutVehicletypeInput, parkinglotUncheckedUpdateWithoutVehicletypeInput>
    create: XOR<parkinglotCreateWithoutVehicletypeInput, parkinglotUncheckedCreateWithoutVehicletypeInput>
  }

  export type parkinglotUpdateWithWhereUniqueWithoutVehicletypeInput = {
    where: parkinglotWhereUniqueInput
    data: XOR<parkinglotUpdateWithoutVehicletypeInput, parkinglotUncheckedUpdateWithoutVehicletypeInput>
  }

  export type parkinglotUpdateManyWithWhereWithoutVehicletypeInput = {
    where: parkinglotScalarWhereInput
    data: XOR<parkinglotUpdateManyMutationInput, parkinglotUncheckedUpdateManyWithoutParkinglotInput>
  }

  export type parkinglotScalarWhereInput = {
    AND?: Enumerable<parkinglotScalarWhereInput>
    OR?: Enumerable<parkinglotScalarWhereInput>
    NOT?: Enumerable<parkinglotScalarWhereInput>
    id?: IntFilter | number
    location?: StringFilter | string
    capacity?: IntFilter | number
    capacityUsed?: IntFilter | number
    hourlyRate?: FloatFilter | number
    isParkDeleted?: BoolFilter | boolean
  }

  export type userCreateWithoutCustomersCardInput = {
    name: string
    email: string
    password: string
    isuserdeleted?: boolean
    booking?: bookingCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCustomersCardInput = {
    id?: number
    name: string
    email: string
    password: string
    isuserdeleted?: boolean
    booking?: bookingUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCustomersCardInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCustomersCardInput, userUncheckedCreateWithoutCustomersCardInput>
  }

  export type userUpsertWithoutCustomersCardInput = {
    update: XOR<userUpdateWithoutCustomersCardInput, userUncheckedUpdateWithoutCustomersCardInput>
    create: XOR<userCreateWithoutCustomersCardInput, userUncheckedCreateWithoutCustomersCardInput>
  }

  export type userUpdateWithoutCustomersCardInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCustomersCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isuserdeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type bookingCreateManyParkinglotInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    userId: number
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
  }

  export type bookingUpdateWithoutParkinglotInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutBookingNestedInput
  }

  export type bookingUncheckedUpdateWithoutParkinglotInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
  }

  export type bookingUncheckedUpdateManyWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
  }

  export type vehicletypeUpdateWithoutParkinglotInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type vehicletypeUncheckedUpdateWithoutParkinglotInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type vehicletypeUncheckedUpdateManyWithoutVehicletypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type bookingCreateManyUserInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    isBookedCompeleted: boolean
    parkingLotId: number
    price: number
    totalPrice: number
    capacityUsedDecremented?: boolean
  }

  export type customerpaymentCardCreateManyUserCardInput = {
    id?: number
    cardId: string
    cardBrand: string
    cardNumber: string
    cardExpMonth: string
    cardExpYear: string
    cardCVC: string
    country: string
  }

  export type bookingUpdateWithoutUserInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
    parkinglot?: parkinglotUpdateOneRequiredWithoutBookingNestedInput
  }

  export type bookingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isBookedCompeleted?: BoolFieldUpdateOperationsInput | boolean
    parkingLotId?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    capacityUsedDecremented?: BoolFieldUpdateOperationsInput | boolean
  }

  export type customerpaymentCardUpdateWithoutUserCardInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    cardBrand?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardExpMonth?: StringFieldUpdateOperationsInput | string
    cardExpYear?: StringFieldUpdateOperationsInput | string
    cardCVC?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type customerpaymentCardUncheckedUpdateWithoutUserCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: StringFieldUpdateOperationsInput | string
    cardBrand?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardExpMonth?: StringFieldUpdateOperationsInput | string
    cardExpYear?: StringFieldUpdateOperationsInput | string
    cardCVC?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type customerpaymentCardUncheckedUpdateManyWithoutCustomersCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    cardId?: StringFieldUpdateOperationsInput | string
    cardBrand?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    cardExpMonth?: StringFieldUpdateOperationsInput | string
    cardExpYear?: StringFieldUpdateOperationsInput | string
    cardCVC?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type parkinglotUpdateWithoutVehicletypeInput = {
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUpdateManyWithoutParkinglotNestedInput
  }

  export type parkinglotUncheckedUpdateWithoutVehicletypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
    booking?: bookingUncheckedUpdateManyWithoutParkinglotNestedInput
  }

  export type parkinglotUncheckedUpdateManyWithoutParkinglotInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    capacityUsed?: IntFieldUpdateOperationsInput | number
    hourlyRate?: FloatFieldUpdateOperationsInput | number
    isParkDeleted?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}